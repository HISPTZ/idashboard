/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { switchMap, tap } from "rxjs/operators";
import { BehaviorSubject, of, timer } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var SystemStateService = /** @class */ (function () {
    function SystemStateService(httpClient) {
        this.httpClient = httpClient;
        this._loggingStatus$ = new BehaviorSubject(true);
        this._timeInterval = 30000;
        this._waitingTime = 0;
    }
    /**
     * @return {?}
     */
    SystemStateService.prototype.checkOnlineStatus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return timer(this._waitingTime, this._timeInterval).pipe(switchMap(function () { return of(navigator.onLine); }), tap(function (isOnline) {
            if (isOnline) {
                // Set time interval to larger value if was lowered
                // Set time interval to larger value if was lowered
                _this._timeInterval = 30000;
                _this._waitingTime = 500;
                _this._checkLoginStatus(isOnline);
            }
            else {
                // Deduce time for the timer
                // Deduce time for the timer
                _this._timeInterval = 500;
                _this._waitingTime = 500;
            }
        }));
    };
    /**
     * @param {?} isOnline
     * @return {?}
     */
    SystemStateService.prototype._checkLoginStatus = /**
     * @param {?} isOnline
     * @return {?}
     */
    function (isOnline) {
        var _this = this;
        this.pingServer().subscribe(function (pingResult) {
            if (pingResult) {
                _this._loggingStatus$.next(pingResult.loggedIn);
            }
        }, function (error) {
            if (isOnline) {
                _this._loggingStatus$.next(false);
            }
        });
    };
    /**
     * @return {?}
     */
    SystemStateService.prototype.getLoginStatus = /**
     * @return {?}
     */
    function () {
        return this._loggingStatus$.asObservable();
    };
    /**
     * @return {?}
     */
    SystemStateService.prototype.pingServer = /**
     * @return {?}
     */
    function () {
        return this.httpClient.get("../../../dhis-web-commons-stream/ping.action");
    };
    SystemStateService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    SystemStateService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SystemStateService.ngInjectableDef = i0.defineInjectable({ factory: function SystemStateService_Factory() { return new SystemStateService(i0.inject(i1.HttpClient)); }, token: SystemStateService, providedIn: "root" });
    return SystemStateService;
}());
export { SystemStateService };
function SystemStateService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemStateService.prototype._loggingStatus$;
    /** @type {?} */
    SystemStateService.prototype._timeInterval;
    /** @type {?} */
    SystemStateService.prototype._waitingTime;
    /** @type {?} */
    SystemStateService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWFwcHMvbmd4LWRoaXMyLW1lbnUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3lzdGVtLXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7O0lBUTVELDRCQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3hDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7S0FDdkI7Ozs7SUFFRCw4Q0FBaUI7OztJQUFqQjtRQUFBLGlCQWdCQztRQWZDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUN0RCxTQUFTLENBQUMsY0FBTSxPQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQXBCLENBQW9CLENBQUMsRUFDckMsR0FBRyxDQUFDLFVBQUEsUUFBUTtZQUNWLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7O2dCQUViLEFBREEsbURBQW1EO2dCQUNuRCxLQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDM0IsS0FBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7Z0JBQ3hCLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNsQztZQUFDLElBQUksQ0FBQyxDQUFDOztnQkFFTixBQURBLDRCQUE0QjtnQkFDNUIsS0FBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUM7Z0JBQ3pCLEtBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO2FBQ3pCO1NBQ0YsQ0FBQyxDQUNILENBQUM7S0FDSDs7Ozs7SUFFTyw4Q0FBaUI7Ozs7Y0FBQyxRQUFpQjs7UUFDekMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FDekIsVUFBQyxVQUFlO1lBQ2QsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDZixLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDaEQ7U0FDRixFQUNELFVBQUEsS0FBSztZQUNILEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEM7U0FDRixDQUNGLENBQUM7Ozs7O0lBR0osMkNBQWM7OztJQUFkO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDNUM7Ozs7SUFFRCx1Q0FBVTs7O0lBQVY7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsOENBQThDLENBQUMsQ0FBQztLQUM1RTs7Z0JBbkRGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Z0JBTHpCLFVBQVU7Ozs2QkFBbkI7O1NBTWEsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBvZiwgT2JzZXJ2YWJsZSwgdGltZXIgfSBmcm9tIFwicnhqc1wiO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFN5c3RlbVN0YXRlU2VydmljZSB7XG4gIHByaXZhdGUgX2xvZ2dpbmdTdGF0dXMkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj47XG4gIHByaXZhdGUgX3RpbWVJbnRlcnZhbDogbnVtYmVyO1xuICBwcml2YXRlIF93YWl0aW5nVGltZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuX2xvZ2dpbmdTdGF0dXMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPih0cnVlKTtcbiAgICB0aGlzLl90aW1lSW50ZXJ2YWwgPSAzMDAwMDtcbiAgICB0aGlzLl93YWl0aW5nVGltZSA9IDA7XG4gIH1cblxuICBjaGVja09ubGluZVN0YXR1cygpIHtcbiAgICByZXR1cm4gdGltZXIodGhpcy5fd2FpdGluZ1RpbWUsIHRoaXMuX3RpbWVJbnRlcnZhbCkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiBvZihuYXZpZ2F0b3Iub25MaW5lKSksXG4gICAgICB0YXAoaXNPbmxpbmUgPT4ge1xuICAgICAgICBpZiAoaXNPbmxpbmUpIHtcbiAgICAgICAgICAvLyBTZXQgdGltZSBpbnRlcnZhbCB0byBsYXJnZXIgdmFsdWUgaWYgd2FzIGxvd2VyZWRcbiAgICAgICAgICB0aGlzLl90aW1lSW50ZXJ2YWwgPSAzMDAwMDtcbiAgICAgICAgICB0aGlzLl93YWl0aW5nVGltZSA9IDUwMDtcbiAgICAgICAgICB0aGlzLl9jaGVja0xvZ2luU3RhdHVzKGlzT25saW5lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBEZWR1Y2UgdGltZSBmb3IgdGhlIHRpbWVyXG4gICAgICAgICAgdGhpcy5fdGltZUludGVydmFsID0gNTAwO1xuICAgICAgICAgIHRoaXMuX3dhaXRpbmdUaW1lID0gNTAwO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIF9jaGVja0xvZ2luU3RhdHVzKGlzT25saW5lOiBib29sZWFuKSB7XG4gICAgdGhpcy5waW5nU2VydmVyKCkuc3Vic2NyaWJlKFxuICAgICAgKHBpbmdSZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICBpZiAocGluZ1Jlc3VsdCkge1xuICAgICAgICAgIHRoaXMuX2xvZ2dpbmdTdGF0dXMkLm5leHQocGluZ1Jlc3VsdC5sb2dnZWRJbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlcnJvciA9PiB7XG4gICAgICAgIGlmIChpc09ubGluZSkge1xuICAgICAgICAgIHRoaXMuX2xvZ2dpbmdTdGF0dXMkLm5leHQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGdldExvZ2luU3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2dnaW5nU3RhdHVzJC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHBpbmdTZXJ2ZXIoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldChcIi4uLy4uLy4uL2RoaXMtd2ViLWNvbW1vbnMtc3RyZWFtL3BpbmcuYWN0aW9uXCIpO1xuICB9XG59XG4iXX0=