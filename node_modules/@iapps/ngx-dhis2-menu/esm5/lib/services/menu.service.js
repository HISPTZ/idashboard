/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import * as fromConstants from '../constants';
import { BehaviorSubject, Observable, forkJoin } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var MenuService = /** @class */ (function () {
    function MenuService(httpClient) {
        this.httpClient = httpClient;
        this._menuModules$ = new BehaviorSubject([]);
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    MenuService.prototype.getSystemSettings = /**
     * @param {?} rootUrl
     * @return {?}
     */
    function (rootUrl) {
        var _this = this;
        return Observable.create(function (observer) {
            forkJoin(_this.httpClient.get(rootUrl + 'api/systemSettings.json'), _this.httpClient.get(rootUrl + 'api/system/info.json')).subscribe(function (settings) {
                observer.next(tslib_1.__assign({}, settings[0], settings[1]));
                observer.complete();
            }, function () { return observer.error(null); });
        });
    };
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    MenuService.prototype.getMenuModules = /**
     * @param {?} rootUrl
     * @return {?}
     */
    function (rootUrl) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.httpClient.get(rootUrl + 'dhis-web-commons/menu/getModules.action').subscribe(function (menuModuleResult) {
                var /** @type {?} */ sanitizedMenu = _this._sanitizeMenuItems(menuModuleResult.modules, rootUrl);
                _this._menuModules$.next(sanitizedMenu);
                observer.next(sanitizedMenu);
                observer.complete();
            }, function () {
                observer.next(null);
                observer.complete();
            });
        });
    };
    /**
     * @return {?}
     */
    MenuService.prototype.getSanitizedMenus = /**
     * @return {?}
     */
    function () {
        return this._menuModules$.asObservable();
    };
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    MenuService.prototype.getUserInfo = /**
     * @param {?} rootUrl
     * @return {?}
     */
    function (rootUrl) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.httpClient.get(rootUrl + 'api/me.json').subscribe(function (userInfo) {
                observer.next(userInfo);
                observer.complete();
            }, function () {
                observer.next(null);
                observer.complete();
            });
        });
    };
    /**
     * @param {?} menuItems
     * @param {?} rootUrl
     * @return {?}
     */
    MenuService.prototype._sanitizeMenuItems = /**
     * @param {?} menuItems
     * @param {?} rootUrl
     * @return {?}
     */
    function (menuItems, rootUrl) {
        var /** @type {?} */ sanitizedMenuItems = menuItems.map(function (item) {
            var /** @type {?} */ newItem = tslib_1.__assign({}, item);
            if (!newItem.hasOwnProperty('displayName') ||
                newItem.displayName === '') {
                newItem.displayName = newItem.name;
            }
            if (newItem.defaultAction.indexOf('http') === -1) {
                newItem.defaultAction = '../../' + newItem.defaultAction;
            }
            if (newItem.icon.indexOf('http') === -1) {
                newItem.icon = '../../' + newItem.icon;
            }
            newItem.onlyShowOnSearch = false;
            return newItem;
        });
        var /** @type {?} */ predefinedMenuItems = fromConstants.PREDEFINED_MENU_ITEMS.map(function (item) {
            var /** @type {?} */ newItem = tslib_1.__assign({}, item);
            if (newItem.defaultAction) {
                newItem.defaultAction = rootUrl + newItem.defaultAction;
            }
            if (newItem.icon) {
                newItem.icon = rootUrl + newItem.icon;
            }
            return newItem;
        });
        return tslib_1.__spread(sanitizedMenuItems, predefinedMenuItems);
    };
    MenuService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    MenuService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ MenuService.ngInjectableDef = i0.defineInjectable({ factory: function MenuService_Factory() { return new MenuService(i0.inject(i1.HttpClient)); }, token: MenuService, providedIn: "root" });
    return MenuService;
}());
export { MenuService };
function MenuService_tsickle_Closure_declarations() {
    /** @type {?} */
    MenuService.prototype._menuModules$;
    /** @type {?} */
    MenuService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,