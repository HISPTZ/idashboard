/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Component } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
var LoginFormComponent = /** @class */ (function () {
    function LoginFormComponent(httpClient) {
        this.httpClient = httpClient;
        this.credentials = {
            username: undefined,
            password: undefined
        };
        this.loginError = '';
    }
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} e
     * @return {?}
     */
    LoginFormComponent.prototype.onSubmit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        e.stopPropagation();
        this.loggingIn = true;
        this.loginError = '';
        var /** @type {?} */ headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
        this.httpClient.post('../../../dhis-web-commons-security/login.action', 'j_username=' +
            this.credentials.username +
            '&j_password=' +
            this.credentials.password, {
            headers: headers
        }).pipe(catchError(this._handleError)).subscribe(function () {
            _this.loggingIn = false;
        }, function (error) {
            _this.loggingIn = false;
            if (error.status === 200 && error.url.indexOf('login') !== -1) {
                _this.loginError = 'Incorrect username or password';
            }
        });
    };
    /**
     * @param {?} err
     * @return {?}
     */
    LoginFormComponent.prototype._handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        var /** @type {?} */ error = null;
        if (err.error instanceof Error) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object ? err.error.message : err.error ? err.error : err.message,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        return throwError(error);
    };
    LoginFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-login-form',
                    template: "<form action=\"\" class=\"login-form\" #loginForm=\"ngForm\">\n  <input class=\"login-form-input\" type=\"text\" required [(ngModel)]=\"credentials.username\" name=\"username\" #username=\"ngModel\"\n    placeholder=\"Enter username\" autofocus tabindex=\"0\">\n  <input class=\"login-form-input\" type=\"password\" required [(ngModel)]=\"credentials.password\" name=\"password\" #password=\"ngModel\"\n    placeholder=\"Enter password\" autofocus tabindex=\"1\">\n  <button class=\"login-form-button\" type=\"submit\" [disabled]=\"(!password.valid && !username.valid) || loggingIn\" (click)=\"onSubmit($event)\"\n    tabindex=\"2\">\n    {{loggingIn ? 'Logging in ...' : 'Login'}}\n  </button>\n</form>\n<div *ngIf=\"loginError !== ''\" class=\"login-error-block\">{{loginError}}</div>",
                    styles: [".login-form{display:flex;padding:3px!important;width:100%}.login-form-input{padding-left:7px;display:flex;align-items:center;justify-content:flex-start;margin-right:3px;height:37px;outline:0;border-radius:2px;border:thin solid #ececec}.login-form-button{height:37px;background-color:#fff;border:thin solid #ececec;border-radius:2px;cursor:pointer}.login-error-block{font-size:14px;color:red;padding:5px}@media (max-width:500px){.login-form{display:block}.login-form input{width:100%;margin-bottom:3px;margin-right:0}.login-form button{width:100%;text-align:center}}"]
                },] },
    ];
    /** @nocollapse */
    LoginFormComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return LoginFormComponent;
}());
export { LoginFormComponent };
function LoginFormComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    LoginFormComponent.prototype.credentials;
    /** @type {?} */
    LoginFormComponent.prototype.loginError;
    /** @type {?} */
    LoginFormComponent.prototype.loggingIn;
    /** @type {?} */
    LoginFormComponent.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWFwcHMvbmd4LWRoaXMyLW1lbnUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9sb2dpbi1mb3JtL2xvZ2luLWZvcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLFdBQVcsRUFFWixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBc0IxQyw0QkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHO1lBQ2pCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztLQUN0Qjs7OztJQUVELHFDQUFROzs7SUFBUjtLQUNDOzs7OztJQUVELHFDQUFROzs7O0lBQVIsVUFBUyxDQUFDO1FBQVYsaUJBNkJDO1FBNUJDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUVyQixxQkFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQ25DLGNBQWMsRUFDZCxtQ0FBbUMsQ0FDcEMsQ0FBQztRQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNsQixpREFBaUQsRUFDakQsYUFBYTtZQUNiLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUTtZQUN6QixjQUFjO1lBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQ3pCO1lBQ0UsT0FBTyxTQUFBO1NBQ1IsQ0FDRixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUM3QztZQUNFLEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQ3hCLEVBQ0QsVUFBQyxLQUFLO1lBQ0osS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5RCxLQUFJLENBQUMsVUFBVSxHQUFHLGdDQUFnQyxDQUFDO2FBQ3BEO1NBQ0YsQ0FDRixDQUFDO0tBQ0g7Ozs7O0lBRU8seUNBQVk7Ozs7Y0FBQyxHQUFzQjtRQUN6QyxxQkFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQzs7WUFFL0IsS0FBSyxHQUFHO2dCQUNOLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FBSztnQkFDbEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO2dCQUNsQixVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVU7Z0JBQzFCLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRzthQUNiLENBQUM7U0FDSDtRQUFDLElBQUksQ0FBQyxDQUFDOzs7WUFHTixLQUFLLEdBQUc7Z0JBQ04sT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLFlBQVksTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU87Z0JBQzlGLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTtnQkFDbEIsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVO2dCQUMxQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7YUFDYixDQUFDO1NBQ0g7UUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Z0JBbkY1QixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLG94QkFVa0U7b0JBQzVFLE1BQU0sRUFBRSxDQUFDLHVqQkFBdWpCLENBQUM7aUJBQ2xrQjs7OztnQkF0QkMsVUFBVTs7NkJBRFo7O1NBd0JhLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEh0dHBDbGllbnQsXG4gIEh0dHBIZWFkZXJzLFxuICBIdHRwRXJyb3JSZXNwb25zZVxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWxvZ2luLWZvcm0nLFxuICB0ZW1wbGF0ZTogYDxmb3JtIGFjdGlvbj1cIlwiIGNsYXNzPVwibG9naW4tZm9ybVwiICNsb2dpbkZvcm09XCJuZ0Zvcm1cIj5cbiAgPGlucHV0IGNsYXNzPVwibG9naW4tZm9ybS1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQgWyhuZ01vZGVsKV09XCJjcmVkZW50aWFscy51c2VybmFtZVwiIG5hbWU9XCJ1c2VybmFtZVwiICN1c2VybmFtZT1cIm5nTW9kZWxcIlxuICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgdXNlcm5hbWVcIiBhdXRvZm9jdXMgdGFiaW5kZXg9XCIwXCI+XG4gIDxpbnB1dCBjbGFzcz1cImxvZ2luLWZvcm0taW5wdXRcIiB0eXBlPVwicGFzc3dvcmRcIiByZXF1aXJlZCBbKG5nTW9kZWwpXT1cImNyZWRlbnRpYWxzLnBhc3N3b3JkXCIgbmFtZT1cInBhc3N3b3JkXCIgI3Bhc3N3b3JkPVwibmdNb2RlbFwiXG4gICAgcGxhY2Vob2xkZXI9XCJFbnRlciBwYXNzd29yZFwiIGF1dG9mb2N1cyB0YWJpbmRleD1cIjFcIj5cbiAgPGJ1dHRvbiBjbGFzcz1cImxvZ2luLWZvcm0tYnV0dG9uXCIgdHlwZT1cInN1Ym1pdFwiIFtkaXNhYmxlZF09XCIoIXBhc3N3b3JkLnZhbGlkICYmICF1c2VybmFtZS52YWxpZCkgfHwgbG9nZ2luZ0luXCIgKGNsaWNrKT1cIm9uU3VibWl0KCRldmVudClcIlxuICAgIHRhYmluZGV4PVwiMlwiPlxuICAgIHt7bG9nZ2luZ0luID8gJ0xvZ2dpbmcgaW4gLi4uJyA6ICdMb2dpbid9fVxuICA8L2J1dHRvbj5cbjwvZm9ybT5cbjxkaXYgKm5nSWY9XCJsb2dpbkVycm9yICE9PSAnJ1wiIGNsYXNzPVwibG9naW4tZXJyb3ItYmxvY2tcIj57e2xvZ2luRXJyb3J9fTwvZGl2PmAsXG4gIHN0eWxlczogW2AubG9naW4tZm9ybXtkaXNwbGF5OmZsZXg7cGFkZGluZzozcHghaW1wb3J0YW50O3dpZHRoOjEwMCV9LmxvZ2luLWZvcm0taW5wdXR7cGFkZGluZy1sZWZ0OjdweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O21hcmdpbi1yaWdodDozcHg7aGVpZ2h0OjM3cHg7b3V0bGluZTowO2JvcmRlci1yYWRpdXM6MnB4O2JvcmRlcjp0aGluIHNvbGlkICNlY2VjZWN9LmxvZ2luLWZvcm0tYnV0dG9ue2hlaWdodDozN3B4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6dGhpbiBzb2xpZCAjZWNlY2VjO2JvcmRlci1yYWRpdXM6MnB4O2N1cnNvcjpwb2ludGVyfS5sb2dpbi1lcnJvci1ibG9ja3tmb250LXNpemU6MTRweDtjb2xvcjpyZWQ7cGFkZGluZzo1cHh9QG1lZGlhIChtYXgtd2lkdGg6NTAwcHgpey5sb2dpbi1mb3Jte2Rpc3BsYXk6YmxvY2t9LmxvZ2luLWZvcm0gaW5wdXR7d2lkdGg6MTAwJTttYXJnaW4tYm90dG9tOjNweDttYXJnaW4tcmlnaHQ6MH0ubG9naW4tZm9ybSBidXR0b257d2lkdGg6MTAwJTt0ZXh0LWFsaWduOmNlbnRlcn19YF1cbn0pXG5leHBvcnQgY2xhc3MgTG9naW5Gb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgY3JlZGVudGlhbHM6IGFueTtcbiAgbG9naW5FcnJvcjogc3RyaW5nO1xuICBsb2dnaW5nSW46IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5jcmVkZW50aWFscyA9IHtcbiAgICAgIHVzZXJuYW1lOiB1bmRlZmluZWQsXG4gICAgICBwYXNzd29yZDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICB0aGlzLmxvZ2luRXJyb3IgPSAnJztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgb25TdWJtaXQoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5sb2dnaW5nSW4gPSB0cnVlO1xuICAgIHRoaXMubG9naW5FcnJvciA9ICcnO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLnNldChcbiAgICAgICdDb250ZW50LVR5cGUnLFxuICAgICAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICApO1xuICAgIHRoaXMuaHR0cENsaWVudC5wb3N0KFxuICAgICAgJy4uLy4uLy4uL2RoaXMtd2ViLWNvbW1vbnMtc2VjdXJpdHkvbG9naW4uYWN0aW9uJyxcbiAgICAgICdqX3VzZXJuYW1lPScgK1xuICAgICAgdGhpcy5jcmVkZW50aWFscy51c2VybmFtZSArXG4gICAgICAnJmpfcGFzc3dvcmQ9JyArXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzLnBhc3N3b3JkLFxuICAgICAge1xuICAgICAgICBoZWFkZXJzXG4gICAgICB9XG4gICAgKS5waXBlKGNhdGNoRXJyb3IodGhpcy5faGFuZGxlRXJyb3IpKS5zdWJzY3JpYmUoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2luZ0luID0gZmFsc2U7XG4gICAgICB9LFxuICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2luZ0luID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDIwMCAmJiBlcnJvci51cmwuaW5kZXhPZignbG9naW4nKSAhPT0gLTEpIHtcbiAgICAgICAgICB0aGlzLmxvZ2luRXJyb3IgPSAnSW5jb3JyZWN0IHVzZXJuYW1lIG9yIHBhc3N3b3JkJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIF9oYW5kbGVFcnJvcihlcnI6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICBpZiAoZXJyLmVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIEEgY2xpZW50LXNpZGUgb3IgbmV0d29yayBlcnJvciBvY2N1cnJlZC4gSGFuZGxlIGl0IGFjY29yZGluZ2x5LlxuICAgICAgZXJyb3IgPSB7XG4gICAgICAgIG1lc3NhZ2U6IGVyci5lcnJvcixcbiAgICAgICAgc3RhdHVzOiBlcnIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiBlcnIuc3RhdHVzVGV4dCxcbiAgICAgICAgdXJsOiBlcnIudXJsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgYmFja2VuZCByZXR1cm5lZCBhbiB1bnN1Y2Nlc3NmdWwgcmVzcG9uc2UgY29kZS5cbiAgICAgIC8vIFRoZSByZXNwb25zZSBib2R5IG1heSBjb250YWluIGNsdWVzIGFzIHRvIHdoYXQgd2VudCB3cm9uZyxcbiAgICAgIGVycm9yID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnIuZXJyb3IgaW5zdGFuY2VvZiBPYmplY3QgPyBlcnIuZXJyb3IubWVzc2FnZSA6IGVyci5lcnJvciA/IGVyci5lcnJvciA6IGVyci5tZXNzYWdlLFxuICAgICAgICBzdGF0dXM6IGVyci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IGVyci5zdGF0dXNUZXh0LFxuICAgICAgICB1cmw6IGVyci51cmxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICB9XG59XG4iXX0=