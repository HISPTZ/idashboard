/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { switchMap, tap } from "rxjs/operators";
import { BehaviorSubject, of, timer } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SystemStateService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._loggingStatus$ = new BehaviorSubject(true);
        this._timeInterval = 30000;
        this._waitingTime = 0;
    }
    /**
     * @return {?}
     */
    checkOnlineStatus() {
        return timer(this._waitingTime, this._timeInterval).pipe(switchMap(() => of(navigator.onLine)), tap(isOnline => {
            if (isOnline) {
                // Set time interval to larger value if was lowered
                this._timeInterval = 30000;
                this._waitingTime = 500;
                this._checkLoginStatus(isOnline);
            }
            else {
                // Deduce time for the timer
                this._timeInterval = 500;
                this._waitingTime = 500;
            }
        }));
    }
    /**
     * @param {?} isOnline
     * @return {?}
     */
    _checkLoginStatus(isOnline) {
        this.pingServer().subscribe((pingResult) => {
            if (pingResult) {
                this._loggingStatus$.next(pingResult.loggedIn);
            }
        }, error => {
            if (isOnline) {
                this._loggingStatus$.next(false);
            }
        });
    }
    /**
     * @return {?}
     */
    getLoginStatus() {
        return this._loggingStatus$.asObservable();
    }
    /**
     * @return {?}
     */
    pingServer() {
        return this.httpClient.get("../../../dhis-web-commons-stream/ping.action");
    }
}
SystemStateService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
SystemStateService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ SystemStateService.ngInjectableDef = i0.defineInjectable({ factory: function SystemStateService_Factory() { return new SystemStateService(i0.inject(i1.HttpClient)); }, token: SystemStateService, providedIn: "root" });
function SystemStateService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemStateService.prototype._loggingStatus$;
    /** @type {?} */
    SystemStateService.prototype._timeInterval;
    /** @type {?} */
    SystemStateService.prototype._waitingTime;
    /** @type {?} */
    SystemStateService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWFwcHMvbmd4LWRoaXMyLW1lbnUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3lzdGVtLXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFHOUQsTUFBTTs7OztJQUtKLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDeEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztLQUN2Qjs7OztJQUVELGlCQUFpQjtRQUNmLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUN0RCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUNyQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDYixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOztnQkFFYixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNsQztZQUFDLElBQUksQ0FBQyxDQUFDOztnQkFFTixJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQztnQkFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7YUFDekI7U0FDRixDQUFDLENBQ0gsQ0FBQztLQUNIOzs7OztJQUVPLGlCQUFpQixDQUFDLFFBQWlCO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQ3pCLENBQUMsVUFBZSxFQUFFLEVBQUU7WUFDbEIsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDZixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDaEQ7U0FDRixFQUNELEtBQUssQ0FBQyxFQUFFO1lBQ04sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNsQztTQUNGLENBQ0YsQ0FBQzs7Ozs7SUFHSixjQUFjO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDNUM7Ozs7SUFFRCxVQUFVO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7S0FDNUU7OztZQW5ERixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBTHpCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHN3aXRjaE1hcCwgdGFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG9mLCBPYnNlcnZhYmxlLCB0aW1lciB9IGZyb20gXCJyeGpzXCI7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgU3lzdGVtU3RhdGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfbG9nZ2luZ1N0YXR1cyQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPjtcbiAgcHJpdmF0ZSBfdGltZUludGVydmFsOiBudW1iZXI7XG4gIHByaXZhdGUgX3dhaXRpbmdUaW1lOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5fbG9nZ2luZ1N0YXR1cyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRydWUpO1xuICAgIHRoaXMuX3RpbWVJbnRlcnZhbCA9IDMwMDAwO1xuICAgIHRoaXMuX3dhaXRpbmdUaW1lID0gMDtcbiAgfVxuXG4gIGNoZWNrT25saW5lU3RhdHVzKCkge1xuICAgIHJldHVybiB0aW1lcih0aGlzLl93YWl0aW5nVGltZSwgdGhpcy5fdGltZUludGVydmFsKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IG9mKG5hdmlnYXRvci5vbkxpbmUpKSxcbiAgICAgIHRhcChpc09ubGluZSA9PiB7XG4gICAgICAgIGlmIChpc09ubGluZSkge1xuICAgICAgICAgIC8vIFNldCB0aW1lIGludGVydmFsIHRvIGxhcmdlciB2YWx1ZSBpZiB3YXMgbG93ZXJlZFxuICAgICAgICAgIHRoaXMuX3RpbWVJbnRlcnZhbCA9IDMwMDAwO1xuICAgICAgICAgIHRoaXMuX3dhaXRpbmdUaW1lID0gNTAwO1xuICAgICAgICAgIHRoaXMuX2NoZWNrTG9naW5TdGF0dXMoaXNPbmxpbmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIERlZHVjZSB0aW1lIGZvciB0aGUgdGltZXJcbiAgICAgICAgICB0aGlzLl90aW1lSW50ZXJ2YWwgPSA1MDA7XG4gICAgICAgICAgdGhpcy5fd2FpdGluZ1RpbWUgPSA1MDA7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NoZWNrTG9naW5TdGF0dXMoaXNPbmxpbmU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnBpbmdTZXJ2ZXIoKS5zdWJzY3JpYmUoXG4gICAgICAocGluZ1Jlc3VsdDogYW55KSA9PiB7XG4gICAgICAgIGlmIChwaW5nUmVzdWx0KSB7XG4gICAgICAgICAgdGhpcy5fbG9nZ2luZ1N0YXR1cyQubmV4dChwaW5nUmVzdWx0LmxvZ2dlZEluKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVycm9yID0+IHtcbiAgICAgICAgaWYgKGlzT25saW5lKSB7XG4gICAgICAgICAgdGhpcy5fbG9nZ2luZ1N0YXR1cyQubmV4dChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZ2V0TG9naW5TdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvZ2dpbmdTdGF0dXMkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcGluZ1NlcnZlcigpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KFwiLi4vLi4vLi4vZGhpcy13ZWItY29tbW9ucy1zdHJlYW0vcGluZy5hY3Rpb25cIik7XG4gIH1cbn1cbiJdfQ==