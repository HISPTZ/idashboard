{"version":3,"sources":["ng://@iapps/ngx-dhis2-http-client/lib/services/manifest.service.ts","null","ng://@iapps/ngx-dhis2-http-client/lib/services/system-info.service.ts","ng://@iapps/ngx-dhis2-http-client/lib/constants/http-config.constant.ts","ng://@iapps/ngx-dhis2-http-client/lib/services/index-db.service.ts","ng://@iapps/ngx-dhis2-http-client/lib/services/ngx-dhis2-http-client.service.ts"],"names":["ManifestService","httpClient","this","_defaultRootUrl","_manifestLoaded","prototype","getManifest","of","_manifest","get","pipe","catchError","console","warn","tap","manifest","_this","getRootUrl","map","activities","dhis","href","Injectable","args","providedIn","HttpClient","__assign","Object","assign","t","s","i","n","arguments","length","p","hasOwnProperty","call","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","SystemInfoService","manifestService","_systemInfoLoaded","getSystemInfo","_systemInfo","switchMap","rootUrl","forkJoin","res","systemInfo","getSystemVersion","splitedVersion","version","split","parseInt","HTTP_CONFIG","includeVersionNumber","preferPreviousApiVersion","useRootUrl","useIndexDb","isExternalLink","IndexDbService","_indexedDB","indexedDB","_dbName","setName","dbName","put","schema","data","Observable","create","observer","open","subscribe","db","transaction","name","store","objectStore","_.isArray","_.each","dataItem","oncomplete","close","complete","onerror","errorEvent","target","errorCode","post","mergeMap","add","findOne","key","onsuccess","successEvent","result","event","log","findAll","request","index","keyPath","openCursor","results","cursor","concat","__spread","continue","delete","objectStoreNames","contains","store_1","keyItem","requestResult","onupgradeneeded","store_2","createObjectStore","createIndex","unique","indexes","schemaIndex","clear","deleteDatabase","onblocked","blockEvent","NgxDhis2HttpClientService","systemInfoService","indexDbService","url","httpConfig","newHttpConfig","_fetchFromIndexDb","indexDbResponse","_get","response","_updateIndexDb","_getSanitizedRootUrl","dataId","uid","id","_handleError","err","ErrorEvent","message","status","statusText","throwError","_getApiRootUrl","preferPreviousVersion","urlInfo","requestData","action","indexDbSchema","indexDbConfig","arrayKey","indexDbKey","_a"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Manifest } from '../models';\nimport { Observable, of } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/internal/operators';\n\n@Injectable({providedIn: 'root'})\nexport class ManifestService {\n  private _manifest: Manifest;\n  private _defaultRootUrl: string;\n  private _manifestLoaded: boolean;\n\n  constructor(private httpClient: HttpClient) {\n    this._defaultRootUrl = '../../../';\n    this._manifestLoaded = false;\n  }\n\n  public getManifest(): Observable<Manifest> {\n    return this._manifestLoaded ? of(this._manifest) : this.httpClient.get<Manifest>('manifest.webapp').pipe(\n      catchError(() => {\n        console.warn('Manifest file could not be loaded, default options have been used instead');\n        return of(null);\n      }),\n      tap((manifest) => {\n        this._manifest = manifest;\n        this._manifestLoaded = true;\n      }));\n  }\n\n  public getRootUrl(): Observable<string> {\n    return this.getManifest().pipe(map((manifest: Manifest) => {\n      if (!manifest) {\n        return this._defaultRootUrl;\n      }\n      return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?\n        manifest.activities.dhis.href : this._defaultRootUrl;\n    }));\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { ManifestService } from './manifest.service';\nimport { map, switchMap, tap } from 'rxjs/internal/operators';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({providedIn: 'root'})\nexport class SystemInfoService {\n  private _systemInfoLoaded: boolean;\n  private _systemInfo: any;\n\n  constructor(private manifestService: ManifestService, private httpClient: HttpClient) {\n    this._systemInfoLoaded = false;\n  }\n\n  getSystemInfo(): Observable<any> {\n    return this._systemInfoLoaded ? of(this._systemInfo) :\n      this.manifestService.getRootUrl().pipe(\n        switchMap((rootUrl: string) => forkJoin(this.httpClient.get(`${rootUrl}api/system/info`),\n          this.httpClient.get(`${rootUrl}api/systemSettings`)).pipe(map((res: any[]) => {\n          return {...res[0], ...res[1]};\n        }), tap((systemInfo: any) => {\n          this._systemInfo = systemInfo;\n          this._systemInfoLoaded = true;\n        }))));\n  }\n\n  public getSystemVersion(): Observable<number> {\n    return this.getSystemInfo().pipe(map((systemInfo: any) => {\n      if (!systemInfo) {\n        return 0;\n      }\n      const splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];\n      return parseInt(splitedVersion[1], 10) || 0;\n    }));\n  }\n}\n","import { HttpConfig } from '../models/http-config.model';\n\nexport const HTTP_CONFIG: HttpConfig = {\n  includeVersionNumber: false,\n  preferPreviousApiVersion: false,\n  useRootUrl: false,\n  useIndexDb: false,\n  isExternalLink: false\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as _ from 'lodash';\nimport { switchMap, mergeMap, tap } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class IndexDbService {\n  private _indexedDB: any;\n  private _dbName: string;\n\n  constructor() {\n    this._indexedDB = indexedDB;\n    this._dbName = 'db'; // by default\n  }\n\n  setName(dbName: string): void {\n    if (dbName) {\n      this._dbName = dbName;\n    }\n  }\n\n  /**\n   * Function to update existing data in the db\n   */\n  put(schema: any, data: any): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.create(schema)\n        .pipe(switchMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n\n          if (_.isArray(data)) {\n            _.each(data, dataItem => {\n              store.put(dataItem);\n            });\n          } else {\n            store.put(data);\n          }\n\n          transaction.oncomplete = () => {\n            observer.next(data);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = (errorEvent: any) => {\n            db.close();\n            observer.error(errorEvent.target.errorCode);\n          };\n        });\n    });\n  }\n\n  /**\n   * Function to add new data in the db\n   */\n  post(schema: any, data: any): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.create(schema)\n        .pipe(mergeMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n\n          // Check if data is array or an object\n          if (_.isArray(data)) {\n            _.each(data, dataItem => {\n              store.add(dataItem);\n            });\n          } else {\n            store.add(data);\n          }\n\n          transaction.oncomplete = () => {\n            observer.next(data);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = () => {\n            observer.next(data);\n            db.close();\n            observer.complete();\n          };\n        });\n    });\n  }\n\n  /**\n   * Function to get value for a particular key from the table\n   */\n  findOne(schema: any, key: string): Observable<any[]> {\n    return new Observable((observer: any) => {\n      this.create(schema)\n        .pipe(mergeMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n          const request = store.get(key);\n          request.onsuccess = successEvent => {\n            observer.next(successEvent.target.result);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = (event: any) => {\n            console.log(event.target.errorCode);\n            db.close();\n            observer.error(event.target.errorCode);\n          };\n        });\n    });\n  }\n\n  /**\n   * Function to find all values for a particular table in the db\n   */\n  findAll(schema: any): Observable<any[]> {\n    return Observable.create((observer: any) => {\n      this.create(schema)\n        .pipe(switchMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n          const storeIndex = store.index(schema.keyPath);\n          const request = storeIndex.openCursor();\n          let results: any[] = [];\n\n          request.onsuccess = successEvent => {\n            const cursor = successEvent.target.result;\n            if (cursor) {\n              results = [...results, cursor.value];\n              cursor.continue();\n            } else {\n              observer.next(results);\n              db.close();\n              observer.complete();\n            }\n          };\n          db.onerror = (event: any) => {\n            db.close();\n            observer.error(event.target.errorCode);\n          };\n        });\n    });\n  }\n\n  /**\n   * Delete data from the db\n   */\n  delete(schema: any, key: string | string[]): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.open().subscribe((db: any) => {\n        if (!db.objectStoreNames.contains(schema.name)) {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n\n          if (_.isArray(key)) {\n            _.each(key, keyItem => {\n              store.delete(keyItem);\n            });\n          } else {\n            store.delete(key);\n          }\n\n          transaction.oncomplete = () => {\n            observer.next(key);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = (errorEvent: any) => {\n            db.close();\n            observer.error(errorEvent.target.errorCode);\n          };\n        }\n      });\n    });\n  }\n\n  /**\n   * Create a schema/table\n   */\n  create(schema: any): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.open().subscribe((requestResult: any) => {\n        if (!requestResult.objectStoreNames.contains(schema.name)) {\n          /**\n           * Close database to allow opening with new version\n           */\n          requestResult.close();\n\n          /**\n           * Set a new connection with new version to allows creating schema\n           */\n          const request = this._indexedDB.open(\n            this._dbName,\n            requestResult.version + 1\n          );\n\n          request.onupgradeneeded = event => {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(schema.name)) {\n              /**\n               * Create corresponding schema\n               */\n              const store = db.createObjectStore(schema.name, {\n                keyPath: schema.keyPath\n              });\n              store.createIndex(schema.keyPath, schema.keyPath, {\n                unique: true\n              });\n\n              /**\n               * Create indexes for schema if supplied\n               */\n              if (schema.indexes) {\n                _.each(schema.indexes, (schemaIndex: any) => {\n                  store.createIndex(schemaIndex, schemaIndex);\n                });\n              }\n\n              /**\n               * Add data if supplied\n               */\n              if (schema.data) {\n                _.each(schema.data, (dataItem: any) => {\n                  store.put(dataItem);\n                });\n              }\n            }\n\n            observer.next('done');\n            observer.complete();\n          };\n\n          request.onerror = errorEvent => {\n            observer.error(errorEvent.target.errorCode);\n          };\n\n          request.onsuccess = successEvent => {\n            successEvent.target.result.close();\n            observer.next('done');\n            observer.complete();\n          };\n        } else {\n          observer.next('done');\n          observer.complete();\n        }\n      });\n    });\n  }\n\n  /**\n   * Delete the whole database\n   */\n  clear(): Observable<any> {\n    return Observable.create((observer: any) => {\n      const request = this._indexedDB.deleteDatabase(this._dbName);\n\n      request.onsuccess = () => {\n        observer.next('done');\n        observer.complete();\n      };\n      request.onerror = errorEvent => {\n        observer.error(errorEvent.target.errorCode);\n      };\n      request.onblocked = blockEvent => {\n        observer.error(blockEvent.target.errorCode);\n      };\n    });\n  }\n\n  private open(): Observable<any> {\n    return Observable.create((observer: any) => {\n      const request = this._indexedDB.open(this._dbName);\n\n      request.onsuccess = successEvent => {\n        observer.next(successEvent.target.result);\n        observer.complete();\n      };\n      request.onerror = errorEvent =>\n        observer.error(errorEvent.target.errorCode);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ManifestService } from './manifest.service';\nimport { SystemInfoService } from './system-info.service';\nimport { Observable, throwError, of } from 'rxjs';\nimport {\n  catchError,\n  map,\n  mergeMap,\n  switchMap,\n  tap\n} from 'rxjs/internal/operators';\nimport { HttpConfig, IndexDbSchema } from '../models/http-config.model';\nimport { HTTP_CONFIG } from '../constants/http-config.constant';\nimport { IndexDbService } from './index-db.service';\n\n@Injectable({ providedIn: 'root' })\nexport class NgxDhis2HttpClientService {\n  constructor(\n    private httpClient: HttpClient,\n    private manifestService: ManifestService,\n    private systemInfoService: SystemInfoService,\n    private indexDbService: IndexDbService\n  ) {}\n\n  get(url: string, httpConfig?: HttpConfig): Observable<any> {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    // Make a call directly from url if is external one\n    if (newHttpConfig.isExternalLink) {\n      return this.httpClient.get(url);\n    }\n\n    // load from index db\n    if (newHttpConfig.useIndexDb) {\n      return this._fetchFromIndexDb(newHttpConfig).pipe(\n        mergeMap((indexDbResponse: any) =>\n          indexDbResponse\n            ? of(indexDbResponse)\n            : this._get(url, newHttpConfig).pipe(\n                mergeMap((response: any) =>\n                  this._updateIndexDb(newHttpConfig, response)\n                )\n              )\n        )\n      );\n    }\n\n    return this._get(url, newHttpConfig);\n  }\n\n  post(url: string, data: any, httpConfig?: HttpConfig) {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    return this._getSanitizedRootUrl(newHttpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient\n          .post(rootUrl + url, data)\n          .pipe(\n            mergeMap((response: any) => {\n              const dataId = response.uid;\n              return newHttpConfig.useIndexDb\n                ? dataId\n                  ? this._updateIndexDb(\n                      newHttpConfig,\n                      {\n                        ...data,\n                        id: dataId\n                      },\n                      'CREATE'\n                    ).pipe(map(() => response))\n                  : of(response)\n                : of(response);\n            })\n          )\n          .pipe(catchError(this._handleError))\n      ),\n      catchError(this._handleError)\n    );\n  }\n\n  put(url: string, data: any, httpConfig?: HttpConfig) {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    return this._getSanitizedRootUrl(newHttpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient.put(rootUrl + url, data).pipe(\n          mergeMap((response: any) =>\n            newHttpConfig.useIndexDb\n              ? this._updateIndexDb(newHttpConfig, data, 'UPDATE').pipe(\n                  map(() => response)\n                )\n              : of(response)\n          ),\n          catchError(this._handleError)\n        )\n      ),\n      catchError(this._handleError)\n    );\n  }\n\n  delete(url: string, httpConfig?: HttpConfig) {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    return this._getSanitizedRootUrl(newHttpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient\n          .delete(rootUrl + url)\n          .pipe(\n            mergeMap((response: any) =>\n              newHttpConfig.useIndexDb\n                ? this._updateIndexDb(newHttpConfig, null, 'DELETE').pipe(\n                    map(() => response)\n                  )\n                : of(response)\n            )\n          )\n          .pipe(catchError(this._handleError))\n      ),\n      catchError(this._handleError)\n    );\n  }\n\n  // private methods\n\n  private _get(url, httpConfig: HttpConfig) {\n    return this._getSanitizedRootUrl(httpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient.get(rootUrl + url).pipe(catchError(this._handleError))\n      ),\n      catchError(this._handleError)\n    );\n  }\n  private _handleError(err: HttpErrorResponse) {\n    let error = null;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      error = {\n        message: err.error,\n        status: err.status,\n        statusText: err.statusText\n      };\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      error = {\n        message:\n          err.error instanceof Object\n            ? err.error.message\n            : err.error || err.message,\n        status: err.status,\n        statusText: err.statusText\n      };\n    }\n    return throwError(error);\n  }\n\n  private _getSanitizedRootUrl(httpConfig: HttpConfig) {\n    return httpConfig.useRootUrl\n      ? this.manifestService.getRootUrl()\n      : this._getApiRootUrl(\n          httpConfig.includeVersionNumber,\n          httpConfig.preferPreviousApiVersion\n        );\n  }\n\n  private _getApiRootUrl(\n    includeVersionNumber: boolean = false,\n    preferPreviousVersion: boolean = false\n  ) {\n    const rootUrlPromise = this.manifestService.getRootUrl().pipe(\n      switchMap(rootUrl =>\n        this.systemInfoService.getSystemVersion().pipe(\n          map((version: number) => {\n            return {\n              rootUrl,\n              version: version - 1 <= 25 ? version + 1 : version\n            };\n          })\n        )\n      )\n    );\n    return rootUrlPromise.pipe(\n      map(\n        (urlInfo: { rootUrl: string; version: number }) =>\n          `${urlInfo.rootUrl}api/${\n            includeVersionNumber && !preferPreviousVersion\n              ? urlInfo.version + '/'\n              : preferPreviousVersion\n              ? urlInfo.version\n                ? urlInfo.version - 1 + '/'\n                : ''\n              : ''\n          }`\n      )\n    );\n  }\n\n  private _updateIndexDb(\n    httpConfig: HttpConfig,\n    requestData: any,\n    action: string = 'CREATE'\n  ) {\n    const indexDbSchema: IndexDbSchema = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.schema\n      : null;\n\n    const arrayKey = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.arrayKey\n      : null;\n\n    const indexDbKey = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.key\n      : null;\n\n    const data = arrayKey ? requestData[arrayKey] : requestData;\n\n    switch (action) {\n      case 'CREATE':\n      case 'UPDATE':\n        return (action === 'CREATE'\n          ? this.indexDbService.post(indexDbSchema, data)\n          : this.indexDbService.put(indexDbSchema, data)\n        ).pipe(\n          map(() => requestData),\n          catchError(e => {\n            console.warn('Could not save data into index DB, ERROR: ' + e);\n            return of(requestData);\n          })\n        );\n      case 'DELETE':\n        return this.indexDbService.delete(indexDbSchema, indexDbKey).pipe(\n          map(() => requestData),\n          catchError(e => {\n            console.warn('Could not delete data from index DB, ERROR: ' + e);\n            return of(requestData);\n          })\n        );\n      default:\n        console.log('No action has been specified');\n        return of(requestData);\n    }\n  }\n\n  private _fetchFromIndexDb(httpConfig: HttpConfig) {\n    const indexDbSchema: IndexDbSchema = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.schema\n      : null;\n\n    const indexDbKey = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.key\n      : null;\n\n    return indexDbKey\n      ? this.indexDbService.findOne(indexDbSchema, indexDbKey)\n      : this.indexDbService.findAll(indexDbSchema).pipe(\n          map(response => {\n            const arrayKey = httpConfig.indexDbConfig\n              ? httpConfig.indexDbConfig.arrayKey\n              : null;\n            return response.length > 0\n              ? arrayKey\n                ? { [arrayKey]: response }\n                : response\n              : null;\n          })\n        );\n  }\n}\n"]}