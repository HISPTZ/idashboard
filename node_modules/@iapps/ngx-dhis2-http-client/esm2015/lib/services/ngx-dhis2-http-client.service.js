/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ManifestService } from './manifest.service';
import { SystemInfoService } from './system-info.service';
import { throwError, of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/internal/operators';
import { HTTP_CONFIG } from '../constants/http-config.constant';
import { IndexDbService } from './index-db.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./manifest.service";
import * as i3 from "./system-info.service";
import * as i4 from "./index-db.service";
export class NgxDhis2HttpClientService {
    /**
     * @param {?} httpClient
     * @param {?} manifestService
     * @param {?} systemInfoService
     * @param {?} indexDbService
     */
    constructor(httpClient, manifestService, systemInfoService, indexDbService) {
        this.httpClient = httpClient;
        this.manifestService = manifestService;
        this.systemInfoService = systemInfoService;
        this.indexDbService = indexDbService;
    }
    /**
     * @param {?} url
     * @param {?=} httpConfig
     * @return {?}
     */
    get(url, httpConfig) {
        const /** @type {?} */ newHttpConfig = Object.assign({}, HTTP_CONFIG, httpConfig);
        // Make a call directly from url if is external one
        if (newHttpConfig.isExternalLink) {
            return this.httpClient.get(url);
        }
        // load from index db
        if (newHttpConfig.useIndexDb) {
            return this._fetchFromIndexDb(newHttpConfig).pipe(mergeMap((indexDbResponse) => indexDbResponse
                ? of(indexDbResponse)
                : this._get(url, newHttpConfig).pipe(mergeMap((response) => this._updateIndexDb(newHttpConfig, response)))));
        }
        return this._get(url, newHttpConfig);
    }
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} httpConfig
     * @return {?}
     */
    post(url, data, httpConfig) {
        const /** @type {?} */ newHttpConfig = Object.assign({}, HTTP_CONFIG, httpConfig);
        return this._getSanitizedRootUrl(newHttpConfig).pipe(mergeMap(rootUrl => this.httpClient
            .post(rootUrl + url, data)
            .pipe(mergeMap((response) => {
            const /** @type {?} */ dataId = response.uid;
            return newHttpConfig.useIndexDb
                ? dataId
                    ? this._updateIndexDb(newHttpConfig, Object.assign({}, data, { id: dataId }), 'CREATE').pipe(map(() => response))
                    : of(response)
                : of(response);
        }))
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} httpConfig
     * @return {?}
     */
    put(url, data, httpConfig) {
        const /** @type {?} */ newHttpConfig = Object.assign({}, HTTP_CONFIG, httpConfig);
        return this._getSanitizedRootUrl(newHttpConfig).pipe(mergeMap(rootUrl => this.httpClient.put(rootUrl + url, data).pipe(mergeMap((response) => newHttpConfig.useIndexDb
            ? this._updateIndexDb(newHttpConfig, data, 'UPDATE').pipe(map(() => response))
            : of(response)), catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?=} httpConfig
     * @return {?}
     */
    delete(url, httpConfig) {
        const /** @type {?} */ newHttpConfig = Object.assign({}, HTTP_CONFIG, httpConfig);
        return this._getSanitizedRootUrl(newHttpConfig).pipe(mergeMap(rootUrl => this.httpClient
            .delete(rootUrl + url)
            .pipe(mergeMap((response) => newHttpConfig.useIndexDb
            ? this._updateIndexDb(newHttpConfig, null, 'DELETE').pipe(map(() => response))
            : of(response)))
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?} httpConfig
     * @return {?}
     */
    _get(url, httpConfig) {
        return this._getSanitizedRootUrl(httpConfig).pipe(mergeMap(rootUrl => this.httpClient.get(rootUrl + url).pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} err
     * @return {?}
     */
    _handleError(err) {
        let /** @type {?} */ error = null;
        if (err.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object
                    ? err.error.message
                    : err.error || err.message,
                status: err.status,
                statusText: err.statusText
            };
        }
        return throwError(error);
    }
    /**
     * @param {?} httpConfig
     * @return {?}
     */
    _getSanitizedRootUrl(httpConfig) {
        return httpConfig.useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(httpConfig.includeVersionNumber, httpConfig.preferPreviousApiVersion);
    }
    /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    _getApiRootUrl(includeVersionNumber = false, preferPreviousVersion = false) {
        const /** @type {?} */ rootUrlPromise = this.manifestService.getRootUrl().pipe(switchMap(rootUrl => this.systemInfoService.getSystemVersion().pipe(map((version) => {
            return {
                rootUrl,
                version: version - 1 <= 25 ? version + 1 : version
            };
        }))));
        return rootUrlPromise.pipe(map((urlInfo) => `${urlInfo.rootUrl}api/${includeVersionNumber && !preferPreviousVersion
            ? urlInfo.version + '/'
            : preferPreviousVersion
                ? urlInfo.version
                    ? urlInfo.version - 1 + '/'
                    : ''
                : ''}`));
    }
    /**
     * @param {?} httpConfig
     * @param {?} requestData
     * @param {?=} action
     * @return {?}
     */
    _updateIndexDb(httpConfig, requestData, action = 'CREATE') {
        const /** @type {?} */ indexDbSchema = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.schema
            : null;
        const /** @type {?} */ arrayKey = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.arrayKey
            : null;
        const /** @type {?} */ indexDbKey = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.key
            : null;
        const /** @type {?} */ data = arrayKey ? requestData[arrayKey] : requestData;
        switch (action) {
            case 'CREATE':
            case 'UPDATE':
                return (action === 'CREATE'
                    ? this.indexDbService.post(indexDbSchema, data)
                    : this.indexDbService.put(indexDbSchema, data)).pipe(map(() => requestData), catchError(e => {
                    console.warn('Could not save data into index DB, ERROR: ' + e);
                    return of(requestData);
                }));
            case 'DELETE':
                return this.indexDbService.delete(indexDbSchema, indexDbKey).pipe(map(() => requestData), catchError(e => {
                    console.warn('Could not delete data from index DB, ERROR: ' + e);
                    return of(requestData);
                }));
            default:
                console.log('No action has been specified');
                return of(requestData);
        }
    }
    /**
     * @param {?} httpConfig
     * @return {?}
     */
    _fetchFromIndexDb(httpConfig) {
        const /** @type {?} */ indexDbSchema = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.schema
            : null;
        const /** @type {?} */ indexDbKey = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.key
            : null;
        return indexDbKey
            ? this.indexDbService.findOne(indexDbSchema, indexDbKey)
            : this.indexDbService.findAll(indexDbSchema).pipe(map(response => {
                const /** @type {?} */ arrayKey = httpConfig.indexDbConfig
                    ? httpConfig.indexDbConfig.arrayKey
                    : null;
                return response.length > 0
                    ? arrayKey
                        ? { [arrayKey]: response }
                        : response
                    : null;
            }));
    }
}
NgxDhis2HttpClientService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
NgxDhis2HttpClientService.ctorParameters = () => [
    { type: HttpClient },
    { type: ManifestService },
    { type: SystemInfoService },
    { type: IndexDbService }
];
/** @nocollapse */ NgxDhis2HttpClientService.ngInjectableDef = i0.defineInjectable({ factory: function NgxDhis2HttpClientService_Factory() { return new NgxDhis2HttpClientService(i0.inject(i1.HttpClient), i0.inject(i2.ManifestService), i0.inject(i3.SystemInfoService), i0.inject(i4.IndexDbService)); }, token: NgxDhis2HttpClientService, providedIn: "root" });
function NgxDhis2HttpClientService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.httpClient;
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.manifestService;
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.systemInfoService;
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.indexDbService;
}

//# sourceMappingURL=data:application/json;base64,