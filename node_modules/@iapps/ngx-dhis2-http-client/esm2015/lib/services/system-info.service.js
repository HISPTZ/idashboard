/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { ManifestService } from './manifest.service';
import { map, switchMap, tap } from 'rxjs/internal/operators';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "./manifest.service";
import * as i2 from "@angular/common/http";
export class SystemInfoService {
    /**
     * @param {?} manifestService
     * @param {?} httpClient
     */
    constructor(manifestService, httpClient) {
        this.manifestService = manifestService;
        this.httpClient = httpClient;
        this._systemInfoLoaded = false;
    }
    /**
     * @return {?}
     */
    getSystemInfo() {
        return this._systemInfoLoaded ? of(this._systemInfo) :
            this.manifestService.getRootUrl().pipe(switchMap((rootUrl) => forkJoin(this.httpClient.get(`${rootUrl}api/system/info`), this.httpClient.get(`${rootUrl}api/systemSettings`)).pipe(map((res) => {
                return Object.assign({}, res[0], res[1]);
            }), tap((systemInfo) => {
                this._systemInfo = systemInfo;
                this._systemInfoLoaded = true;
            }))));
    }
    /**
     * @return {?}
     */
    getSystemVersion() {
        return this.getSystemInfo().pipe(map((systemInfo) => {
            if (!systemInfo) {
                return 0;
            }
            const /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
            return parseInt(splitedVersion[1], 10) || 0;
        }));
    }
}
SystemInfoService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
SystemInfoService.ctorParameters = () => [
    { type: ManifestService },
    { type: HttpClient }
];
/** @nocollapse */ SystemInfoService.ngInjectableDef = i0.defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(i0.inject(i1.ManifestService), i0.inject(i2.HttpClient)); }, token: SystemInfoService, providedIn: "root" });
function SystemInfoService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemInfoService.prototype._systemInfoLoaded;
    /** @type {?} */
    SystemInfoService.prototype._systemInfo;
    /** @type {?} */
    SystemInfoService.prototype.manifestService;
    /** @type {?} */
    SystemInfoService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLWluZm8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpYXBwcy9uZ3gtZGhpczItaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3lzdGVtLWluZm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBR2xELE1BQU07Ozs7O0lBSUosWUFBb0IsZUFBZ0MsRUFBVSxVQUFzQjtRQUFoRSxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ2xGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7S0FDaEM7Ozs7SUFFRCxhQUFhO1FBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUNwQyxTQUFTLENBQUMsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8saUJBQWlCLENBQUMsRUFDdEYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBVSxFQUFFLEVBQUU7Z0JBQzdFLE1BQU0sbUJBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTthQUMvQixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBZSxFQUFFLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO2dCQUM5QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO2FBQy9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNYOzs7O0lBRU0sZ0JBQWdCO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQWUsRUFBRSxFQUFFO1lBQ3ZELEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUNWO1lBQ0QsdUJBQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDL0UsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdDLENBQUMsQ0FBQyxDQUFDOzs7O1lBNUJQLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7WUFKdkIsZUFBZTtZQUVmLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmb3JrSm9pbiwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1hbmlmZXN0U2VydmljZSB9IGZyb20gJy4vbWFuaWZlc3Quc2VydmljZSc7XG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgU3lzdGVtSW5mb1NlcnZpY2Uge1xuICBwcml2YXRlIF9zeXN0ZW1JbmZvTG9hZGVkOiBib29sZWFuO1xuICBwcml2YXRlIF9zeXN0ZW1JbmZvOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtYW5pZmVzdFNlcnZpY2U6IE1hbmlmZXN0U2VydmljZSwgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5fc3lzdGVtSW5mb0xvYWRlZCA9IGZhbHNlO1xuICB9XG5cbiAgZ2V0U3lzdGVtSW5mbygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9zeXN0ZW1JbmZvTG9hZGVkID8gb2YodGhpcy5fc3lzdGVtSW5mbykgOlxuICAgICAgdGhpcy5tYW5pZmVzdFNlcnZpY2UuZ2V0Um9vdFVybCgpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgocm9vdFVybDogc3RyaW5nKSA9PiBmb3JrSm9pbih0aGlzLmh0dHBDbGllbnQuZ2V0KGAke3Jvb3RVcmx9YXBpL3N5c3RlbS9pbmZvYCksXG4gICAgICAgICAgdGhpcy5odHRwQ2xpZW50LmdldChgJHtyb290VXJsfWFwaS9zeXN0ZW1TZXR0aW5nc2ApKS5waXBlKG1hcCgocmVzOiBhbnlbXSkgPT4ge1xuICAgICAgICAgIHJldHVybiB7Li4ucmVzWzBdLCAuLi5yZXNbMV19O1xuICAgICAgICB9KSwgdGFwKChzeXN0ZW1JbmZvOiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLl9zeXN0ZW1JbmZvID0gc3lzdGVtSW5mbztcbiAgICAgICAgICB0aGlzLl9zeXN0ZW1JbmZvTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfSkpKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3lzdGVtVmVyc2lvbigpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmdldFN5c3RlbUluZm8oKS5waXBlKG1hcCgoc3lzdGVtSW5mbzogYW55KSA9PiB7XG4gICAgICBpZiAoIXN5c3RlbUluZm8pIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzcGxpdGVkVmVyc2lvbiA9IHN5c3RlbUluZm8udmVyc2lvbiA/IHN5c3RlbUluZm8udmVyc2lvbi5zcGxpdCgnLicpIDogW107XG4gICAgICByZXR1cm4gcGFyc2VJbnQoc3BsaXRlZFZlcnNpb25bMV0sIDEwKSB8fCAwO1xuICAgIH0pKTtcbiAgfVxufVxuIl19