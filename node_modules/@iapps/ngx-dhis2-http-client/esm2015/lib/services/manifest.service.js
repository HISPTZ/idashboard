/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { tap, catchError, map } from 'rxjs/internal/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ManifestService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._defaultRootUrl = '../../../';
        this._manifestLoaded = false;
    }
    /**
     * @return {?}
     */
    getManifest() {
        return this._manifestLoaded ? of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(catchError(() => {
            console.warn('Manifest file could not be loaded, default options have been used instead');
            return of(null);
        }), tap((manifest) => {
            this._manifest = manifest;
            this._manifestLoaded = true;
        }));
    }
    /**
     * @return {?}
     */
    getRootUrl() {
        return this.getManifest().pipe(map((manifest) => {
            if (!manifest) {
                return this._defaultRootUrl;
            }
            return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                manifest.activities.dhis.href : this._defaultRootUrl;
        }));
    }
}
ManifestService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
ManifestService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ManifestService.ngInjectableDef = i0.defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(i0.inject(i1.HttpClient)); }, token: ManifestService, providedIn: "root" });
function ManifestService_tsickle_Closure_declarations() {
    /** @type {?} */
    ManifestService.prototype._manifest;
    /** @type {?} */
    ManifestService.prototype._defaultRootUrl;
    /** @type {?} */
    ManifestService.prototype._manifestLoaded;
    /** @type {?} */
    ManifestService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpYXBwcy9uZ3gtZGhpczItaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbWFuaWZlc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBRy9ELE1BQU07Ozs7SUFLSixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3hDLElBQUksQ0FBQyxlQUFlLEdBQUcsV0FBVyxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0tBQzlCOzs7O0lBRU0sV0FBVztRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQVcsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQ3RHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLDJFQUEyRSxDQUFDLENBQUM7WUFDMUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQixDQUFDLEVBQ0YsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUMxQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztTQUM3QixDQUFDLENBQUMsQ0FBQzs7Ozs7SUFHRCxVQUFVO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBa0IsRUFBRSxFQUFFO1lBQ3hELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQzthQUM3QjtZQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN2RixRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7U0FDeEQsQ0FBQyxDQUFDLENBQUM7Ozs7WUE5QlAsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztZQUx2QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE1hbmlmZXN0IH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAsIGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTWFuaWZlc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfbWFuaWZlc3Q6IE1hbmlmZXN0O1xuICBwcml2YXRlIF9kZWZhdWx0Um9vdFVybDogc3RyaW5nO1xuICBwcml2YXRlIF9tYW5pZmVzdExvYWRlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICB0aGlzLl9kZWZhdWx0Um9vdFVybCA9ICcuLi8uLi8uLi8nO1xuICAgIHRoaXMuX21hbmlmZXN0TG9hZGVkID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWFuaWZlc3QoKTogT2JzZXJ2YWJsZTxNYW5pZmVzdD4ge1xuICAgIHJldHVybiB0aGlzLl9tYW5pZmVzdExvYWRlZCA/IG9mKHRoaXMuX21hbmlmZXN0KSA6IHRoaXMuaHR0cENsaWVudC5nZXQ8TWFuaWZlc3Q+KCdtYW5pZmVzdC53ZWJhcHAnKS5waXBlKFxuICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybignTWFuaWZlc3QgZmlsZSBjb3VsZCBub3QgYmUgbG9hZGVkLCBkZWZhdWx0IG9wdGlvbnMgaGF2ZSBiZWVuIHVzZWQgaW5zdGVhZCcpO1xuICAgICAgICByZXR1cm4gb2YobnVsbCk7XG4gICAgICB9KSxcbiAgICAgIHRhcCgobWFuaWZlc3QpID0+IHtcbiAgICAgICAgdGhpcy5fbWFuaWZlc3QgPSBtYW5pZmVzdDtcbiAgICAgICAgdGhpcy5fbWFuaWZlc3RMb2FkZWQgPSB0cnVlO1xuICAgICAgfSkpO1xuICB9XG5cbiAgcHVibGljIGdldFJvb3RVcmwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYW5pZmVzdCgpLnBpcGUobWFwKChtYW5pZmVzdDogTWFuaWZlc3QpID0+IHtcbiAgICAgIGlmICghbWFuaWZlc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRSb290VXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hbmlmZXN0LmFjdGl2aXRpZXMgJiYgbWFuaWZlc3QuYWN0aXZpdGllcy5kaGlzICYmIG1hbmlmZXN0LmFjdGl2aXRpZXMuZGhpcy5ocmVmID9cbiAgICAgICAgbWFuaWZlc3QuYWN0aXZpdGllcy5kaGlzLmhyZWYgOiB0aGlzLl9kZWZhdWx0Um9vdFVybDtcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==