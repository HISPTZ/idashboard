import { Injectable, defineInjectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, forkJoin, Observable, throwError } from 'rxjs';
import { tap, catchError, map, switchMap, mergeMap as mergeMap$1 } from 'rxjs/internal/operators';
import { __assign, __spread } from 'tslib';
import { isArray, each } from 'lodash';
import { switchMap as switchMap$1, mergeMap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ManifestService = /** @class */ (function () {
    function ManifestService(httpClient) {
        this.httpClient = httpClient;
        this._defaultRootUrl = '../../../';
        this._manifestLoaded = false;
    }
    /**
     * @return {?}
     */
    ManifestService.prototype.getManifest = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._manifestLoaded ? of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(catchError(function () {
            console.warn('Manifest file could not be loaded, default options have been used instead');
            return of(null);
        }), tap(function (manifest) {
            _this._manifest = manifest;
            _this._manifestLoaded = true;
        }));
    };
    /**
     * @return {?}
     */
    ManifestService.prototype.getRootUrl = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.getManifest().pipe(map(function (manifest) {
            if (!manifest) {
                return _this._defaultRootUrl;
            }
            return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                manifest.activities.dhis.href : _this._defaultRootUrl;
        }));
    };
    ManifestService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    ManifestService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ ManifestService.ngInjectableDef = defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(inject(HttpClient)); }, token: ManifestService, providedIn: "root" });
    return ManifestService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SystemInfoService = /** @class */ (function () {
    function SystemInfoService(manifestService, httpClient) {
        this.manifestService = manifestService;
        this.httpClient = httpClient;
        this._systemInfoLoaded = false;
    }
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemInfo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._systemInfoLoaded ? of(this._systemInfo) :
            this.manifestService.getRootUrl().pipe(switchMap(function (rootUrl) { return forkJoin(_this.httpClient.get(rootUrl + "api/system/info"), _this.httpClient.get(rootUrl + "api/systemSettings")).pipe(map(function (res) {
                return __assign({}, res[0], res[1]);
            }), tap(function (systemInfo) {
                _this._systemInfo = systemInfo;
                _this._systemInfoLoaded = true;
            })); }));
    };
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemVersion = /**
     * @return {?}
     */
    function () {
        return this.getSystemInfo().pipe(map(function (systemInfo) {
            if (!systemInfo) {
                return 0;
            }
            var /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
            return parseInt(splitedVersion[1], 10) || 0;
        }));
    };
    SystemInfoService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    SystemInfoService.ctorParameters = function () { return [
        { type: ManifestService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SystemInfoService.ngInjectableDef = defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(inject(ManifestService), inject(HttpClient)); }, token: SystemInfoService, providedIn: "root" });
    return SystemInfoService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ HTTP_CONFIG = {
    includeVersionNumber: false,
    preferPreviousApiVersion: false,
    useRootUrl: false,
    useIndexDb: false,
    isExternalLink: false
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var IndexDbService = /** @class */ (function () {
    function IndexDbService() {
        this._indexedDB = indexedDB;
        this._dbName = 'db'; // by default
    }
    /**
     * @param {?} dbName
     * @return {?}
     */
    IndexDbService.prototype.setName = /**
     * @param {?} dbName
     * @return {?}
     */
    function (dbName) {
        if (dbName) {
            this._dbName = dbName;
        }
    };
    /**
     * Function to update existing data in the db
     */
    /**
     * Function to update existing data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    IndexDbService.prototype.put = /**
     * Function to update existing data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    function (schema, data) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.create(schema)
                .pipe(switchMap$1(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                if (isArray(data)) {
                    each(data, function (dataItem) {
                        store.put(dataItem);
                    });
                }
                else {
                    store.put(data);
                }
                transaction.oncomplete = function () {
                    observer.next(data);
                    db.close();
                    observer.complete();
                };
                db.onerror = function (errorEvent) {
                    db.close();
                    observer.error(errorEvent.target.errorCode);
                };
            });
        });
    };
    /**
     * Function to add new data in the db
     */
    /**
     * Function to add new data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    IndexDbService.prototype.post = /**
     * Function to add new data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    function (schema, data) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.create(schema)
                .pipe(mergeMap(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                // Check if data is array or an object
                if (isArray(data)) {
                    each(data, function (dataItem) {
                        store.add(dataItem);
                    });
                }
                else {
                    store.add(data);
                }
                transaction.oncomplete = function () {
                    observer.next(data);
                    db.close();
                    observer.complete();
                };
                db.onerror = function () {
                    observer.next(data);
                    db.close();
                    observer.complete();
                };
            });
        });
    };
    /**
     * Function to get value for a particular key from the table
     */
    /**
     * Function to get value for a particular key from the table
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    IndexDbService.prototype.findOne = /**
     * Function to get value for a particular key from the table
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    function (schema, key) {
        var _this = this;
        return new Observable(function (observer) {
            _this.create(schema)
                .pipe(mergeMap(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                var /** @type {?} */ request = store.get(key);
                request.onsuccess = function (successEvent) {
                    observer.next(successEvent.target.result);
                    db.close();
                    observer.complete();
                };
                db.onerror = function (event) {
                    console.log(event.target.errorCode);
                    db.close();
                    observer.error(event.target.errorCode);
                };
            });
        });
    };
    /**
     * Function to find all values for a particular table in the db
     */
    /**
     * Function to find all values for a particular table in the db
     * @param {?} schema
     * @return {?}
     */
    IndexDbService.prototype.findAll = /**
     * Function to find all values for a particular table in the db
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.create(schema)
                .pipe(switchMap$1(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                var /** @type {?} */ storeIndex = store.index(schema.keyPath);
                var /** @type {?} */ request = storeIndex.openCursor();
                var /** @type {?} */ results = [];
                request.onsuccess = function (successEvent) {
                    var /** @type {?} */ cursor = successEvent.target.result;
                    if (cursor) {
                        results = __spread(results, [cursor.value]);
                        cursor.continue();
                    }
                    else {
                        observer.next(results);
                        db.close();
                        observer.complete();
                    }
                };
                db.onerror = function (event) {
                    db.close();
                    observer.error(event.target.errorCode);
                };
            });
        });
    };
    /**
     * Delete data from the db
     */
    /**
     * Delete data from the db
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    IndexDbService.prototype.delete = /**
     * Delete data from the db
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    function (schema, key) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.open().subscribe(function (db) {
                if (!db.objectStoreNames.contains(schema.name)) {
                    var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                    var /** @type {?} */ store_1 = transaction.objectStore(schema.name);
                    if (isArray(key)) {
                        each(key, function (keyItem) {
                            store_1.delete(keyItem);
                        });
                    }
                    else {
                        store_1.delete(key);
                    }
                    transaction.oncomplete = function () {
                        observer.next(key);
                        db.close();
                        observer.complete();
                    };
                    db.onerror = function (errorEvent) {
                        db.close();
                        observer.error(errorEvent.target.errorCode);
                    };
                }
            });
        });
    };
    /**
     * Create a schema/table
     */
    /**
     * Create a schema/table
     * @param {?} schema
     * @return {?}
     */
    IndexDbService.prototype.create = /**
     * Create a schema/table
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.open().subscribe(function (requestResult) {
                if (!requestResult.objectStoreNames.contains(schema.name)) {
                    /**
                               * Close database to allow opening with new version
                               */
                    requestResult.close();
                    /**
                     * Set a new connection with new version to allows creating schema
                     */
                    var /** @type {?} */ request = _this._indexedDB.open(_this._dbName, requestResult.version + 1);
                    request.onupgradeneeded = function (event) {
                        var /** @type {?} */ db = event.target.result;
                        if (!db.objectStoreNames.contains(schema.name)) {
                            /**
                             * Create corresponding schema
                             */
                            var /** @type {?} */ store_2 = db.createObjectStore(schema.name, {
                                keyPath: schema.keyPath
                            });
                            store_2.createIndex(schema.keyPath, schema.keyPath, {
                                unique: true
                            });
                            /**
                                           * Create indexes for schema if supplied
                                           */
                            if (schema.indexes) {
                                each(schema.indexes, function (schemaIndex) {
                                    store_2.createIndex(schemaIndex, schemaIndex);
                                });
                            }
                            /**
                                           * Add data if supplied
                                           */
                            if (schema.data) {
                                each(schema.data, function (dataItem) {
                                    store_2.put(dataItem);
                                });
                            }
                        }
                        observer.next('done');
                        observer.complete();
                    };
                    request.onerror = function (errorEvent) {
                        observer.error(errorEvent.target.errorCode);
                    };
                    request.onsuccess = function (successEvent) {
                        successEvent.target.result.close();
                        observer.next('done');
                        observer.complete();
                    };
                }
                else {
                    observer.next('done');
                    observer.complete();
                }
            });
        });
    };
    /**
     * Delete the whole database
     */
    /**
     * Delete the whole database
     * @return {?}
     */
    IndexDbService.prototype.clear = /**
     * Delete the whole database
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create(function (observer) {
            var /** @type {?} */ request = _this._indexedDB.deleteDatabase(_this._dbName);
            request.onsuccess = function () {
                observer.next('done');
                observer.complete();
            };
            request.onerror = function (errorEvent) {
                observer.error(errorEvent.target.errorCode);
            };
            request.onblocked = function (blockEvent) {
                observer.error(blockEvent.target.errorCode);
            };
        });
    };
    /**
     * @return {?}
     */
    IndexDbService.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create(function (observer) {
            var /** @type {?} */ request = _this._indexedDB.open(_this._dbName);
            request.onsuccess = function (successEvent) {
                observer.next(successEvent.target.result);
                observer.complete();
            };
            request.onerror = function (errorEvent) {
                return observer.error(errorEvent.target.errorCode);
            };
        });
    };
    IndexDbService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    IndexDbService.ctorParameters = function () { return []; };
    /** @nocollapse */ IndexDbService.ngInjectableDef = defineInjectable({ factory: function IndexDbService_Factory() { return new IndexDbService(); }, token: IndexDbService, providedIn: "root" });
    return IndexDbService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxDhis2HttpClientService = /** @class */ (function () {
    function NgxDhis2HttpClientService(httpClient, manifestService, systemInfoService, indexDbService) {
        this.httpClient = httpClient;
        this.manifestService = manifestService;
        this.systemInfoService = systemInfoService;
        this.indexDbService = indexDbService;
    }
    /**
     * @param {?} url
     * @param {?=} httpConfig
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.get = /**
     * @param {?} url
     * @param {?=} httpConfig
     * @return {?}
     */
    function (url, httpConfig) {
        var _this = this;
        var /** @type {?} */ newHttpConfig = __assign({}, HTTP_CONFIG, httpConfig);
        // Make a call directly from url if is external one
        if (newHttpConfig.isExternalLink) {
            return this.httpClient.get(url);
        }
        // load from index db
        if (newHttpConfig.useIndexDb) {
            return this._fetchFromIndexDb(newHttpConfig).pipe(mergeMap$1(function (indexDbResponse) {
                return indexDbResponse
                    ? of(indexDbResponse)
                    : _this._get(url, newHttpConfig).pipe(mergeMap$1(function (response) {
                        return _this._updateIndexDb(newHttpConfig, response);
                    }));
            }));
        }
        return this._get(url, newHttpConfig);
    };
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} httpConfig
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.post = /**
     * @param {?} url
     * @param {?} data
     * @param {?=} httpConfig
     * @return {?}
     */
    function (url, data, httpConfig) {
        var _this = this;
        var /** @type {?} */ newHttpConfig = __assign({}, HTTP_CONFIG, httpConfig);
        return this._getSanitizedRootUrl(newHttpConfig).pipe(mergeMap$1(function (rootUrl) {
            return _this.httpClient
                .post(rootUrl + url, data)
                .pipe(mergeMap$1(function (response) {
                var /** @type {?} */ dataId = response.uid;
                return newHttpConfig.useIndexDb
                    ? dataId
                        ? _this._updateIndexDb(newHttpConfig, __assign({}, data, { id: dataId }), 'CREATE').pipe(map(function () { return response; }))
                        : of(response)
                    : of(response);
            }))
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} httpConfig
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.put = /**
     * @param {?} url
     * @param {?} data
     * @param {?=} httpConfig
     * @return {?}
     */
    function (url, data, httpConfig) {
        var _this = this;
        var /** @type {?} */ newHttpConfig = __assign({}, HTTP_CONFIG, httpConfig);
        return this._getSanitizedRootUrl(newHttpConfig).pipe(mergeMap$1(function (rootUrl) {
            return _this.httpClient.put(rootUrl + url, data).pipe(mergeMap$1(function (response) {
                return newHttpConfig.useIndexDb
                    ? _this._updateIndexDb(newHttpConfig, data, 'UPDATE').pipe(map(function () { return response; }))
                    : of(response);
            }), catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?=} httpConfig
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.delete = /**
     * @param {?} url
     * @param {?=} httpConfig
     * @return {?}
     */
    function (url, httpConfig) {
        var _this = this;
        var /** @type {?} */ newHttpConfig = __assign({}, HTTP_CONFIG, httpConfig);
        return this._getSanitizedRootUrl(newHttpConfig).pipe(mergeMap$1(function (rootUrl) {
            return _this.httpClient
                .delete(rootUrl + url)
                .pipe(mergeMap$1(function (response) {
                return newHttpConfig.useIndexDb
                    ? _this._updateIndexDb(newHttpConfig, null, 'DELETE').pipe(map(function () { return response; }))
                    : of(response);
            }))
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?} httpConfig
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._get = /**
     * @param {?} url
     * @param {?} httpConfig
     * @return {?}
     */
    function (url, httpConfig) {
        var _this = this;
        return this._getSanitizedRootUrl(httpConfig).pipe(mergeMap$1(function (rootUrl) {
            return _this.httpClient.get(rootUrl + url).pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} err
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        var /** @type {?} */ error = null;
        if (err.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object
                    ? err.error.message
                    : err.error || err.message,
                status: err.status,
                statusText: err.statusText
            };
        }
        return throwError(error);
    };
    /**
     * @param {?} httpConfig
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._getSanitizedRootUrl = /**
     * @param {?} httpConfig
     * @return {?}
     */
    function (httpConfig) {
        return httpConfig.useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(httpConfig.includeVersionNumber, httpConfig.preferPreviousApiVersion);
    };
    /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._getApiRootUrl = /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    function (includeVersionNumber, preferPreviousVersion) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousVersion === void 0) { preferPreviousVersion = false; }
        var /** @type {?} */ rootUrlPromise = this.manifestService.getRootUrl().pipe(switchMap(function (rootUrl) {
            return _this.systemInfoService.getSystemVersion().pipe(map(function (version) {
                return {
                    rootUrl: rootUrl,
                    version: version - 1 <= 25 ? version + 1 : version
                };
            }));
        }));
        return rootUrlPromise.pipe(map(function (urlInfo) {
            return urlInfo.rootUrl + "api/" + (includeVersionNumber && !preferPreviousVersion
                ? urlInfo.version + '/'
                : preferPreviousVersion
                    ? urlInfo.version
                        ? urlInfo.version - 1 + '/'
                        : ''
                    : '');
        }));
    };
    /**
     * @param {?} httpConfig
     * @param {?} requestData
     * @param {?=} action
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._updateIndexDb = /**
     * @param {?} httpConfig
     * @param {?} requestData
     * @param {?=} action
     * @return {?}
     */
    function (httpConfig, requestData, action) {
        if (action === void 0) { action = 'CREATE'; }
        var /** @type {?} */ indexDbSchema = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.schema
            : null;
        var /** @type {?} */ arrayKey = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.arrayKey
            : null;
        var /** @type {?} */ indexDbKey = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.key
            : null;
        var /** @type {?} */ data = arrayKey ? requestData[arrayKey] : requestData;
        switch (action) {
            case 'CREATE':
            case 'UPDATE':
                return (action === 'CREATE'
                    ? this.indexDbService.post(indexDbSchema, data)
                    : this.indexDbService.put(indexDbSchema, data)).pipe(map(function () { return requestData; }), catchError(function (e) {
                    console.warn('Could not save data into index DB, ERROR: ' + e);
                    return of(requestData);
                }));
            case 'DELETE':
                return this.indexDbService.delete(indexDbSchema, indexDbKey).pipe(map(function () { return requestData; }), catchError(function (e) {
                    console.warn('Could not delete data from index DB, ERROR: ' + e);
                    return of(requestData);
                }));
            default:
                console.log('No action has been specified');
                return of(requestData);
        }
    };
    /**
     * @param {?} httpConfig
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._fetchFromIndexDb = /**
     * @param {?} httpConfig
     * @return {?}
     */
    function (httpConfig) {
        var /** @type {?} */ indexDbSchema = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.schema
            : null;
        var /** @type {?} */ indexDbKey = httpConfig.indexDbConfig
            ? httpConfig.indexDbConfig.key
            : null;
        return indexDbKey
            ? this.indexDbService.findOne(indexDbSchema, indexDbKey)
            : this.indexDbService.findAll(indexDbSchema).pipe(map(function (response) {
                var /** @type {?} */ arrayKey = httpConfig.indexDbConfig
                    ? httpConfig.indexDbConfig.arrayKey
                    : null;
                return response.length > 0
                    ? arrayKey
                        ? (_a = {}, _a[arrayKey] = response, _a) : response
                    : null;
                var _a;
            }));
    };
    NgxDhis2HttpClientService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    NgxDhis2HttpClientService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: ManifestService },
        { type: SystemInfoService },
        { type: IndexDbService }
    ]; };
    /** @nocollapse */ NgxDhis2HttpClientService.ngInjectableDef = defineInjectable({ factory: function NgxDhis2HttpClientService_Factory() { return new NgxDhis2HttpClientService(inject(HttpClient), inject(ManifestService), inject(SystemInfoService), inject(IndexDbService)); }, token: NgxDhis2HttpClientService, providedIn: "root" });
    return NgxDhis2HttpClientService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ManifestService, SystemInfoService, NgxDhis2HttpClientService, IndexDbService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,