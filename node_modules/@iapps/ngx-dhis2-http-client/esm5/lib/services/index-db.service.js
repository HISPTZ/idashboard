/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as _ from 'lodash';
import { switchMap, mergeMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
var IndexDbService = /** @class */ (function () {
    function IndexDbService() {
        this._indexedDB = indexedDB;
        this._dbName = 'db'; // by default
    }
    /**
     * @param {?} dbName
     * @return {?}
     */
    IndexDbService.prototype.setName = /**
     * @param {?} dbName
     * @return {?}
     */
    function (dbName) {
        if (dbName) {
            this._dbName = dbName;
        }
    };
    /**
     * Function to update existing data in the db
     */
    /**
     * Function to update existing data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    IndexDbService.prototype.put = /**
     * Function to update existing data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    function (schema, data) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.create(schema)
                .pipe(switchMap(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                if (_.isArray(data)) {
                    _.each(data, function (dataItem) {
                        store.put(dataItem);
                    });
                }
                else {
                    store.put(data);
                }
                transaction.oncomplete = function () {
                    observer.next(data);
                    db.close();
                    observer.complete();
                };
                db.onerror = function (errorEvent) {
                    db.close();
                    observer.error(errorEvent.target.errorCode);
                };
            });
        });
    };
    /**
     * Function to add new data in the db
     */
    /**
     * Function to add new data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    IndexDbService.prototype.post = /**
     * Function to add new data in the db
     * @param {?} schema
     * @param {?} data
     * @return {?}
     */
    function (schema, data) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.create(schema)
                .pipe(mergeMap(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                // Check if data is array or an object
                if (_.isArray(data)) {
                    _.each(data, function (dataItem) {
                        store.add(dataItem);
                    });
                }
                else {
                    store.add(data);
                }
                transaction.oncomplete = function () {
                    observer.next(data);
                    db.close();
                    observer.complete();
                };
                db.onerror = function () {
                    observer.next(data);
                    db.close();
                    observer.complete();
                };
            });
        });
    };
    /**
     * Function to get value for a particular key from the table
     */
    /**
     * Function to get value for a particular key from the table
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    IndexDbService.prototype.findOne = /**
     * Function to get value for a particular key from the table
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    function (schema, key) {
        var _this = this;
        return new Observable(function (observer) {
            _this.create(schema)
                .pipe(mergeMap(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                var /** @type {?} */ request = store.get(key);
                request.onsuccess = function (successEvent) {
                    observer.next(successEvent.target.result);
                    db.close();
                    observer.complete();
                };
                db.onerror = function (event) {
                    console.log(event.target.errorCode);
                    db.close();
                    observer.error(event.target.errorCode);
                };
            });
        });
    };
    /**
     * Function to find all values for a particular table in the db
     */
    /**
     * Function to find all values for a particular table in the db
     * @param {?} schema
     * @return {?}
     */
    IndexDbService.prototype.findAll = /**
     * Function to find all values for a particular table in the db
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.create(schema)
                .pipe(switchMap(function () { return _this.open(); }))
                .subscribe(function (db) {
                var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                var /** @type {?} */ store = transaction.objectStore(schema.name);
                var /** @type {?} */ storeIndex = store.index(schema.keyPath);
                var /** @type {?} */ request = storeIndex.openCursor();
                var /** @type {?} */ results = [];
                request.onsuccess = function (successEvent) {
                    var /** @type {?} */ cursor = successEvent.target.result;
                    if (cursor) {
                        results = tslib_1.__spread(results, [cursor.value]);
                        cursor.continue();
                    }
                    else {
                        observer.next(results);
                        db.close();
                        observer.complete();
                    }
                };
                db.onerror = function (event) {
                    db.close();
                    observer.error(event.target.errorCode);
                };
            });
        });
    };
    /**
     * Delete data from the db
     */
    /**
     * Delete data from the db
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    IndexDbService.prototype.delete = /**
     * Delete data from the db
     * @param {?} schema
     * @param {?} key
     * @return {?}
     */
    function (schema, key) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.open().subscribe(function (db) {
                if (!db.objectStoreNames.contains(schema.name)) {
                    var /** @type {?} */ transaction = db.transaction(schema.name, 'readwrite');
                    var /** @type {?} */ store_1 = transaction.objectStore(schema.name);
                    if (_.isArray(key)) {
                        _.each(key, function (keyItem) {
                            store_1.delete(keyItem);
                        });
                    }
                    else {
                        store_1.delete(key);
                    }
                    transaction.oncomplete = function () {
                        observer.next(key);
                        db.close();
                        observer.complete();
                    };
                    db.onerror = function (errorEvent) {
                        db.close();
                        observer.error(errorEvent.target.errorCode);
                    };
                }
            });
        });
    };
    /**
     * Create a schema/table
     */
    /**
     * Create a schema/table
     * @param {?} schema
     * @return {?}
     */
    IndexDbService.prototype.create = /**
     * Create a schema/table
     * @param {?} schema
     * @return {?}
     */
    function (schema) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.open().subscribe(function (requestResult) {
                if (!requestResult.objectStoreNames.contains(schema.name)) {
                    /**
                               * Close database to allow opening with new version
                               */
                    requestResult.close();
                    /**
                     * Set a new connection with new version to allows creating schema
                     */
                    var /** @type {?} */ request = _this._indexedDB.open(_this._dbName, requestResult.version + 1);
                    request.onupgradeneeded = function (event) {
                        var /** @type {?} */ db = event.target.result;
                        if (!db.objectStoreNames.contains(schema.name)) {
                            /**
                             * Create corresponding schema
                             */
                            var /** @type {?} */ store_2 = db.createObjectStore(schema.name, {
                                keyPath: schema.keyPath
                            });
                            store_2.createIndex(schema.keyPath, schema.keyPath, {
                                unique: true
                            });
                            /**
                                           * Create indexes for schema if supplied
                                           */
                            if (schema.indexes) {
                                _.each(schema.indexes, function (schemaIndex) {
                                    store_2.createIndex(schemaIndex, schemaIndex);
                                });
                            }
                            /**
                                           * Add data if supplied
                                           */
                            if (schema.data) {
                                _.each(schema.data, function (dataItem) {
                                    store_2.put(dataItem);
                                });
                            }
                        }
                        observer.next('done');
                        observer.complete();
                    };
                    request.onerror = function (errorEvent) {
                        observer.error(errorEvent.target.errorCode);
                    };
                    request.onsuccess = function (successEvent) {
                        successEvent.target.result.close();
                        observer.next('done');
                        observer.complete();
                    };
                }
                else {
                    observer.next('done');
                    observer.complete();
                }
            });
        });
    };
    /**
     * Delete the whole database
     */
    /**
     * Delete the whole database
     * @return {?}
     */
    IndexDbService.prototype.clear = /**
     * Delete the whole database
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create(function (observer) {
            var /** @type {?} */ request = _this._indexedDB.deleteDatabase(_this._dbName);
            request.onsuccess = function () {
                observer.next('done');
                observer.complete();
            };
            request.onerror = function (errorEvent) {
                observer.error(errorEvent.target.errorCode);
            };
            request.onblocked = function (blockEvent) {
                observer.error(blockEvent.target.errorCode);
            };
        });
    };
    /**
     * @return {?}
     */
    IndexDbService.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create(function (observer) {
            var /** @type {?} */ request = _this._indexedDB.open(_this._dbName);
            request.onsuccess = function (successEvent) {
                observer.next(successEvent.target.result);
                observer.complete();
            };
            request.onerror = function (errorEvent) {
                return observer.error(errorEvent.target.errorCode);
            };
        });
    };
    IndexDbService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    IndexDbService.ctorParameters = function () { return []; };
    /** @nocollapse */ IndexDbService.ngInjectableDef = i0.defineInjectable({ factory: function IndexDbService_Factory() { return new IndexDbService(); }, token: IndexDbService, providedIn: "root" });
    return IndexDbService;
}());
export { IndexDbService };
function IndexDbService_tsickle_Closure_declarations() {
    /** @type {?} */
    IndexDbService.prototype._indexedDB;
    /** @type {?} */
    IndexDbService.prototype._dbName;
}

//# sourceMappingURL=data:application/json;base64,