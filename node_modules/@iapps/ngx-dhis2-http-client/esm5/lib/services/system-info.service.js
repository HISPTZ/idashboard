/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { ManifestService } from './manifest.service';
import { map, switchMap, tap } from 'rxjs/internal/operators';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "./manifest.service";
import * as i2 from "@angular/common/http";
var SystemInfoService = /** @class */ (function () {
    function SystemInfoService(manifestService, httpClient) {
        this.manifestService = manifestService;
        this.httpClient = httpClient;
        this._systemInfoLoaded = false;
    }
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemInfo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._systemInfoLoaded ? of(this._systemInfo) :
            this.manifestService.getRootUrl().pipe(switchMap(function (rootUrl) { return forkJoin(_this.httpClient.get(rootUrl + "api/system/info"), _this.httpClient.get(rootUrl + "api/systemSettings")).pipe(map(function (res) {
                return tslib_1.__assign({}, res[0], res[1]);
            }), tap(function (systemInfo) {
                _this._systemInfo = systemInfo;
                _this._systemInfoLoaded = true;
            })); }));
    };
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemVersion = /**
     * @return {?}
     */
    function () {
        return this.getSystemInfo().pipe(map(function (systemInfo) {
            if (!systemInfo) {
                return 0;
            }
            var /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
            return parseInt(splitedVersion[1], 10) || 0;
        }));
    };
    SystemInfoService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    SystemInfoService.ctorParameters = function () { return [
        { type: ManifestService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SystemInfoService.ngInjectableDef = i0.defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(i0.inject(i1.ManifestService), i0.inject(i2.HttpClient)); }, token: SystemInfoService, providedIn: "root" });
    return SystemInfoService;
}());
export { SystemInfoService };
function SystemInfoService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemInfoService.prototype._systemInfoLoaded;
    /** @type {?} */
    SystemInfoService.prototype._systemInfo;
    /** @type {?} */
    SystemInfoService.prototype.manifestService;
    /** @type {?} */
    SystemInfoService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLWluZm8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpYXBwcy9uZ3gtZGhpczItaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3lzdGVtLWluZm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7SUFPaEQsMkJBQW9CLGVBQWdDLEVBQVUsVUFBc0I7UUFBaEUsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNsRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0tBQ2hDOzs7O0lBRUQseUNBQWE7OztJQUFiO1FBQUEsaUJBVUM7UUFUQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQ3BDLFNBQVMsQ0FBQyxVQUFDLE9BQWUsSUFBSyxPQUFBLFFBQVEsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBSSxPQUFPLG9CQUFpQixDQUFDLEVBQ3RGLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFJLE9BQU8sdUJBQW9CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFVO2dCQUN6RSxNQUFNLHNCQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7YUFDL0IsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxVQUFDLFVBQWU7Z0JBQ3RCLEtBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO2dCQUM5QixLQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO2FBQy9CLENBQUMsQ0FBQyxFQU40QixDQU01QixDQUFDLENBQUMsQ0FBQztLQUNYOzs7O0lBRU0sNENBQWdCOzs7O1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLFVBQWU7WUFDbkQsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixNQUFNLENBQUMsQ0FBQyxDQUFDO2FBQ1Y7WUFDRCxxQkFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMvRSxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0MsQ0FBQyxDQUFDLENBQUM7OztnQkE1QlAsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztnQkFKdkIsZUFBZTtnQkFFZixVQUFVOzs7NEJBSm5COztTQU9hLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTWFuaWZlc3RTZXJ2aWNlIH0gZnJvbSAnLi9tYW5pZmVzdC5zZXJ2aWNlJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL2ludGVybmFsL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBTeXN0ZW1JbmZvU2VydmljZSB7XG4gIHByaXZhdGUgX3N5c3RlbUluZm9Mb2FkZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX3N5c3RlbUluZm86IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1hbmlmZXN0U2VydmljZTogTWFuaWZlc3RTZXJ2aWNlLCBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICB0aGlzLl9zeXN0ZW1JbmZvTG9hZGVkID0gZmFsc2U7XG4gIH1cblxuICBnZXRTeXN0ZW1JbmZvKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX3N5c3RlbUluZm9Mb2FkZWQgPyBvZih0aGlzLl9zeXN0ZW1JbmZvKSA6XG4gICAgICB0aGlzLm1hbmlmZXN0U2VydmljZS5nZXRSb290VXJsKCkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKChyb290VXJsOiBzdHJpbmcpID0+IGZvcmtKb2luKHRoaXMuaHR0cENsaWVudC5nZXQoYCR7cm9vdFVybH1hcGkvc3lzdGVtL2luZm9gKSxcbiAgICAgICAgICB0aGlzLmh0dHBDbGllbnQuZ2V0KGAke3Jvb3RVcmx9YXBpL3N5c3RlbVNldHRpbmdzYCkpLnBpcGUobWFwKChyZXM6IGFueVtdKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHsuLi5yZXNbMF0sIC4uLnJlc1sxXX07XG4gICAgICAgIH0pLCB0YXAoKHN5c3RlbUluZm86IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMuX3N5c3RlbUluZm8gPSBzeXN0ZW1JbmZvO1xuICAgICAgICAgIHRoaXMuX3N5c3RlbUluZm9Mb2FkZWQgPSB0cnVlO1xuICAgICAgICB9KSkpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTeXN0ZW1WZXJzaW9uKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3lzdGVtSW5mbygpLnBpcGUobWFwKChzeXN0ZW1JbmZvOiBhbnkpID0+IHtcbiAgICAgIGlmICghc3lzdGVtSW5mbykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNwbGl0ZWRWZXJzaW9uID0gc3lzdGVtSW5mby52ZXJzaW9uID8gc3lzdGVtSW5mby52ZXJzaW9uLnNwbGl0KCcuJykgOiBbXTtcbiAgICAgIHJldHVybiBwYXJzZUludChzcGxpdGVkVmVyc2lvblsxXSwgMTApIHx8IDA7XG4gICAgfSkpO1xuICB9XG59XG4iXX0=