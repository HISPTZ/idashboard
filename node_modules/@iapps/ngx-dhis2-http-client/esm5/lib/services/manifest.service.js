/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { tap, catchError, map } from 'rxjs/internal/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var ManifestService = /** @class */ (function () {
    function ManifestService(httpClient) {
        this.httpClient = httpClient;
        this._defaultRootUrl = '../../../';
        this._manifestLoaded = false;
    }
    /**
     * @return {?}
     */
    ManifestService.prototype.getManifest = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._manifestLoaded ? of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(catchError(function () {
            console.warn('Manifest file could not be loaded, default options have been used instead');
            return of(null);
        }), tap(function (manifest) {
            _this._manifest = manifest;
            _this._manifestLoaded = true;
        }));
    };
    /**
     * @return {?}
     */
    ManifestService.prototype.getRootUrl = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.getManifest().pipe(map(function (manifest) {
            if (!manifest) {
                return _this._defaultRootUrl;
            }
            return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                manifest.activities.dhis.href : _this._defaultRootUrl;
        }));
    };
    ManifestService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    ManifestService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ ManifestService.ngInjectableDef = i0.defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(i0.inject(i1.HttpClient)); }, token: ManifestService, providedIn: "root" });
    return ManifestService;
}());
export { ManifestService };
function ManifestService_tsickle_Closure_declarations() {
    /** @type {?} */
    ManifestService.prototype._manifest;
    /** @type {?} */
    ManifestService.prototype._defaultRootUrl;
    /** @type {?} */
    ManifestService.prototype._manifestLoaded;
    /** @type {?} */
    ManifestService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpYXBwcy9uZ3gtZGhpczItaHR0cC1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbWFuaWZlc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7OztJQVE3RCx5QkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN4QyxJQUFJLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztLQUM5Qjs7OztJQUVNLHFDQUFXOzs7OztRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQVcsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQ3RHLFVBQVUsQ0FBQztZQUNULE9BQU8sQ0FBQyxJQUFJLENBQUMsMkVBQTJFLENBQUMsQ0FBQztZQUMxRixNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCLENBQUMsRUFDRixHQUFHLENBQUMsVUFBQyxRQUFRO1lBQ1gsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFDMUIsS0FBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDN0IsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBR0Qsb0NBQVU7Ozs7O1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsUUFBa0I7WUFDcEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNkLE1BQU0sQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDO2FBQzdCO1lBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZGLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQztTQUN4RCxDQUFDLENBQUMsQ0FBQzs7O2dCQTlCUCxVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O2dCQUx2QixVQUFVOzs7MEJBRG5COztTQU9hLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTWFuaWZlc3QgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCwgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBNYW5pZmVzdFNlcnZpY2Uge1xuICBwcml2YXRlIF9tYW5pZmVzdDogTWFuaWZlc3Q7XG4gIHByaXZhdGUgX2RlZmF1bHRSb290VXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgX21hbmlmZXN0TG9hZGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuX2RlZmF1bHRSb290VXJsID0gJy4uLy4uLy4uLyc7XG4gICAgdGhpcy5fbWFuaWZlc3RMb2FkZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNYW5pZmVzdCgpOiBPYnNlcnZhYmxlPE1hbmlmZXN0PiB7XG4gICAgcmV0dXJuIHRoaXMuX21hbmlmZXN0TG9hZGVkID8gb2YodGhpcy5fbWFuaWZlc3QpIDogdGhpcy5odHRwQ2xpZW50LmdldDxNYW5pZmVzdD4oJ21hbmlmZXN0LndlYmFwcCcpLnBpcGUoXG4gICAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgY29uc29sZS53YXJuKCdNYW5pZmVzdCBmaWxlIGNvdWxkIG5vdCBiZSBsb2FkZWQsIGRlZmF1bHQgb3B0aW9ucyBoYXZlIGJlZW4gdXNlZCBpbnN0ZWFkJyk7XG4gICAgICAgIHJldHVybiBvZihudWxsKTtcbiAgICAgIH0pLFxuICAgICAgdGFwKChtYW5pZmVzdCkgPT4ge1xuICAgICAgICB0aGlzLl9tYW5pZmVzdCA9IG1hbmlmZXN0O1xuICAgICAgICB0aGlzLl9tYW5pZmVzdExvYWRlZCA9IHRydWU7XG4gICAgICB9KSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Um9vdFVybCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmdldE1hbmlmZXN0KCkucGlwZShtYXAoKG1hbmlmZXN0OiBNYW5pZmVzdCkgPT4ge1xuICAgICAgaWYgKCFtYW5pZmVzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFJvb3RVcmw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFuaWZlc3QuYWN0aXZpdGllcyAmJiBtYW5pZmVzdC5hY3Rpdml0aWVzLmRoaXMgJiYgbWFuaWZlc3QuYWN0aXZpdGllcy5kaGlzLmhyZWYgP1xuICAgICAgICBtYW5pZmVzdC5hY3Rpdml0aWVzLmRoaXMuaHJlZiA6IHRoaXMuX2RlZmF1bHRSb290VXJsO1xuICAgIH0pKTtcbiAgfVxufVxuIl19