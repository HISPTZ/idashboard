{"version":3,"file":"iapps-ngx-dhis2-http-client.js.map","sources":["ng://@iapps/ngx-dhis2-http-client/lib/services/manifest.service.ts","ng://@iapps/ngx-dhis2-http-client/lib/services/system-info.service.ts","ng://@iapps/ngx-dhis2-http-client/lib/constants/http-config.constant.ts","ng://@iapps/ngx-dhis2-http-client/lib/services/index-db.service.ts","ng://@iapps/ngx-dhis2-http-client/lib/services/ngx-dhis2-http-client.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Manifest } from '../models';\nimport { Observable, of } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/internal/operators';\n\n@Injectable({providedIn: 'root'})\nexport class ManifestService {\n  private _manifest: Manifest;\n  private _defaultRootUrl: string;\n  private _manifestLoaded: boolean;\n\n  constructor(private httpClient: HttpClient) {\n    this._defaultRootUrl = '../../../';\n    this._manifestLoaded = false;\n  }\n\n  public getManifest(): Observable<Manifest> {\n    return this._manifestLoaded ? of(this._manifest) : this.httpClient.get<Manifest>('manifest.webapp').pipe(\n      catchError(() => {\n        console.warn('Manifest file could not be loaded, default options have been used instead');\n        return of(null);\n      }),\n      tap((manifest) => {\n        this._manifest = manifest;\n        this._manifestLoaded = true;\n      }));\n  }\n\n  public getRootUrl(): Observable<string> {\n    return this.getManifest().pipe(map((manifest: Manifest) => {\n      if (!manifest) {\n        return this._defaultRootUrl;\n      }\n      return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?\n        manifest.activities.dhis.href : this._defaultRootUrl;\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { ManifestService } from './manifest.service';\nimport { map, switchMap, tap } from 'rxjs/internal/operators';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({providedIn: 'root'})\nexport class SystemInfoService {\n  private _systemInfoLoaded: boolean;\n  private _systemInfo: any;\n\n  constructor(private manifestService: ManifestService, private httpClient: HttpClient) {\n    this._systemInfoLoaded = false;\n  }\n\n  getSystemInfo(): Observable<any> {\n    return this._systemInfoLoaded ? of(this._systemInfo) :\n      this.manifestService.getRootUrl().pipe(\n        switchMap((rootUrl: string) => forkJoin(this.httpClient.get(`${rootUrl}api/system/info`),\n          this.httpClient.get(`${rootUrl}api/systemSettings`)).pipe(map((res: any[]) => {\n          return {...res[0], ...res[1]};\n        }), tap((systemInfo: any) => {\n          this._systemInfo = systemInfo;\n          this._systemInfoLoaded = true;\n        }))));\n  }\n\n  public getSystemVersion(): Observable<number> {\n    return this.getSystemInfo().pipe(map((systemInfo: any) => {\n      if (!systemInfo) {\n        return 0;\n      }\n      const splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];\n      return parseInt(splitedVersion[1], 10) || 0;\n    }));\n  }\n}\n","import { HttpConfig } from '../models/http-config.model';\n\nexport const HTTP_CONFIG: HttpConfig = {\n  includeVersionNumber: false,\n  preferPreviousApiVersion: false,\n  useRootUrl: false,\n  useIndexDb: false,\n  isExternalLink: false\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as _ from 'lodash';\nimport { switchMap, mergeMap, tap } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class IndexDbService {\n  private _indexedDB: any;\n  private _dbName: string;\n\n  constructor() {\n    this._indexedDB = indexedDB;\n    this._dbName = 'db'; // by default\n  }\n\n  setName(dbName: string): void {\n    if (dbName) {\n      this._dbName = dbName;\n    }\n  }\n\n  /**\n   * Function to update existing data in the db\n   */\n  put(schema: any, data: any): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.create(schema)\n        .pipe(switchMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n\n          if (_.isArray(data)) {\n            _.each(data, dataItem => {\n              store.put(dataItem);\n            });\n          } else {\n            store.put(data);\n          }\n\n          transaction.oncomplete = () => {\n            observer.next(data);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = (errorEvent: any) => {\n            db.close();\n            observer.error(errorEvent.target.errorCode);\n          };\n        });\n    });\n  }\n\n  /**\n   * Function to add new data in the db\n   */\n  post(schema: any, data: any): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.create(schema)\n        .pipe(mergeMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n\n          // Check if data is array or an object\n          if (_.isArray(data)) {\n            _.each(data, dataItem => {\n              store.add(dataItem);\n            });\n          } else {\n            store.add(data);\n          }\n\n          transaction.oncomplete = () => {\n            observer.next(data);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = () => {\n            observer.next(data);\n            db.close();\n            observer.complete();\n          };\n        });\n    });\n  }\n\n  /**\n   * Function to get value for a particular key from the table\n   */\n  findOne(schema: any, key: string): Observable<any[]> {\n    return new Observable((observer: any) => {\n      this.create(schema)\n        .pipe(mergeMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n          const request = store.get(key);\n          request.onsuccess = successEvent => {\n            observer.next(successEvent.target.result);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = (event: any) => {\n            console.log(event.target.errorCode);\n            db.close();\n            observer.error(event.target.errorCode);\n          };\n        });\n    });\n  }\n\n  /**\n   * Function to find all values for a particular table in the db\n   */\n  findAll(schema: any): Observable<any[]> {\n    return Observable.create((observer: any) => {\n      this.create(schema)\n        .pipe(switchMap(() => this.open()))\n        .subscribe((db: any) => {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n          const storeIndex = store.index(schema.keyPath);\n          const request = storeIndex.openCursor();\n          let results: any[] = [];\n\n          request.onsuccess = successEvent => {\n            const cursor = successEvent.target.result;\n            if (cursor) {\n              results = [...results, cursor.value];\n              cursor.continue();\n            } else {\n              observer.next(results);\n              db.close();\n              observer.complete();\n            }\n          };\n          db.onerror = (event: any) => {\n            db.close();\n            observer.error(event.target.errorCode);\n          };\n        });\n    });\n  }\n\n  /**\n   * Delete data from the db\n   */\n  delete(schema: any, key: string | string[]): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.open().subscribe((db: any) => {\n        if (!db.objectStoreNames.contains(schema.name)) {\n          const transaction = db.transaction(schema.name, 'readwrite');\n          const store = transaction.objectStore(schema.name);\n\n          if (_.isArray(key)) {\n            _.each(key, keyItem => {\n              store.delete(keyItem);\n            });\n          } else {\n            store.delete(key);\n          }\n\n          transaction.oncomplete = () => {\n            observer.next(key);\n            db.close();\n            observer.complete();\n          };\n          db.onerror = (errorEvent: any) => {\n            db.close();\n            observer.error(errorEvent.target.errorCode);\n          };\n        }\n      });\n    });\n  }\n\n  /**\n   * Create a schema/table\n   */\n  create(schema: any): Observable<any> {\n    return Observable.create((observer: any) => {\n      this.open().subscribe((requestResult: any) => {\n        if (!requestResult.objectStoreNames.contains(schema.name)) {\n          /**\n           * Close database to allow opening with new version\n           */\n          requestResult.close();\n\n          /**\n           * Set a new connection with new version to allows creating schema\n           */\n          const request = this._indexedDB.open(\n            this._dbName,\n            requestResult.version + 1\n          );\n\n          request.onupgradeneeded = event => {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(schema.name)) {\n              /**\n               * Create corresponding schema\n               */\n              const store = db.createObjectStore(schema.name, {\n                keyPath: schema.keyPath\n              });\n              store.createIndex(schema.keyPath, schema.keyPath, {\n                unique: true\n              });\n\n              /**\n               * Create indexes for schema if supplied\n               */\n              if (schema.indexes) {\n                _.each(schema.indexes, (schemaIndex: any) => {\n                  store.createIndex(schemaIndex, schemaIndex);\n                });\n              }\n\n              /**\n               * Add data if supplied\n               */\n              if (schema.data) {\n                _.each(schema.data, (dataItem: any) => {\n                  store.put(dataItem);\n                });\n              }\n            }\n\n            observer.next('done');\n            observer.complete();\n          };\n\n          request.onerror = errorEvent => {\n            observer.error(errorEvent.target.errorCode);\n          };\n\n          request.onsuccess = successEvent => {\n            successEvent.target.result.close();\n            observer.next('done');\n            observer.complete();\n          };\n        } else {\n          observer.next('done');\n          observer.complete();\n        }\n      });\n    });\n  }\n\n  /**\n   * Delete the whole database\n   */\n  clear(): Observable<any> {\n    return Observable.create((observer: any) => {\n      const request = this._indexedDB.deleteDatabase(this._dbName);\n\n      request.onsuccess = () => {\n        observer.next('done');\n        observer.complete();\n      };\n      request.onerror = errorEvent => {\n        observer.error(errorEvent.target.errorCode);\n      };\n      request.onblocked = blockEvent => {\n        observer.error(blockEvent.target.errorCode);\n      };\n    });\n  }\n\n  private open(): Observable<any> {\n    return Observable.create((observer: any) => {\n      const request = this._indexedDB.open(this._dbName);\n\n      request.onsuccess = successEvent => {\n        observer.next(successEvent.target.result);\n        observer.complete();\n      };\n      request.onerror = errorEvent =>\n        observer.error(errorEvent.target.errorCode);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ManifestService } from './manifest.service';\nimport { SystemInfoService } from './system-info.service';\nimport { Observable, throwError, of } from 'rxjs';\nimport {\n  catchError,\n  map,\n  mergeMap,\n  switchMap,\n  tap\n} from 'rxjs/internal/operators';\nimport { HttpConfig, IndexDbSchema } from '../models/http-config.model';\nimport { HTTP_CONFIG } from '../constants/http-config.constant';\nimport { IndexDbService } from './index-db.service';\n\n@Injectable({ providedIn: 'root' })\nexport class NgxDhis2HttpClientService {\n  constructor(\n    private httpClient: HttpClient,\n    private manifestService: ManifestService,\n    private systemInfoService: SystemInfoService,\n    private indexDbService: IndexDbService\n  ) {}\n\n  get(url: string, httpConfig?: HttpConfig): Observable<any> {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    // Make a call directly from url if is external one\n    if (newHttpConfig.isExternalLink) {\n      return this.httpClient.get(url);\n    }\n\n    // load from index db\n    if (newHttpConfig.useIndexDb) {\n      return this._fetchFromIndexDb(newHttpConfig).pipe(\n        mergeMap((indexDbResponse: any) =>\n          indexDbResponse\n            ? of(indexDbResponse)\n            : this._get(url, newHttpConfig).pipe(\n                mergeMap((response: any) =>\n                  this._updateIndexDb(newHttpConfig, response)\n                )\n              )\n        )\n      );\n    }\n\n    return this._get(url, newHttpConfig);\n  }\n\n  post(url: string, data: any, httpConfig?: HttpConfig) {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    return this._getSanitizedRootUrl(newHttpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient\n          .post(rootUrl + url, data)\n          .pipe(\n            mergeMap((response: any) => {\n              const dataId = response.uid;\n              return newHttpConfig.useIndexDb\n                ? dataId\n                  ? this._updateIndexDb(\n                      newHttpConfig,\n                      {\n                        ...data,\n                        id: dataId\n                      },\n                      'CREATE'\n                    ).pipe(map(() => response))\n                  : of(response)\n                : of(response);\n            })\n          )\n          .pipe(catchError(this._handleError))\n      ),\n      catchError(this._handleError)\n    );\n  }\n\n  put(url: string, data: any, httpConfig?: HttpConfig) {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    return this._getSanitizedRootUrl(newHttpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient.put(rootUrl + url, data).pipe(\n          mergeMap((response: any) =>\n            newHttpConfig.useIndexDb\n              ? this._updateIndexDb(newHttpConfig, data, 'UPDATE').pipe(\n                  map(() => response)\n                )\n              : of(response)\n          ),\n          catchError(this._handleError)\n        )\n      ),\n      catchError(this._handleError)\n    );\n  }\n\n  delete(url: string, httpConfig?: HttpConfig) {\n    const newHttpConfig = { ...HTTP_CONFIG, ...httpConfig };\n\n    return this._getSanitizedRootUrl(newHttpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient\n          .delete(rootUrl + url)\n          .pipe(\n            mergeMap((response: any) =>\n              newHttpConfig.useIndexDb\n                ? this._updateIndexDb(newHttpConfig, null, 'DELETE').pipe(\n                    map(() => response)\n                  )\n                : of(response)\n            )\n          )\n          .pipe(catchError(this._handleError))\n      ),\n      catchError(this._handleError)\n    );\n  }\n\n  // private methods\n\n  private _get(url, httpConfig: HttpConfig) {\n    return this._getSanitizedRootUrl(httpConfig).pipe(\n      mergeMap(rootUrl =>\n        this.httpClient.get(rootUrl + url).pipe(catchError(this._handleError))\n      ),\n      catchError(this._handleError)\n    );\n  }\n  private _handleError(err: HttpErrorResponse) {\n    let error = null;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      error = {\n        message: err.error,\n        status: err.status,\n        statusText: err.statusText\n      };\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      error = {\n        message:\n          err.error instanceof Object\n            ? err.error.message\n            : err.error || err.message,\n        status: err.status,\n        statusText: err.statusText\n      };\n    }\n    return throwError(error);\n  }\n\n  private _getSanitizedRootUrl(httpConfig: HttpConfig) {\n    return httpConfig.useRootUrl\n      ? this.manifestService.getRootUrl()\n      : this._getApiRootUrl(\n          httpConfig.includeVersionNumber,\n          httpConfig.preferPreviousApiVersion\n        );\n  }\n\n  private _getApiRootUrl(\n    includeVersionNumber: boolean = false,\n    preferPreviousVersion: boolean = false\n  ) {\n    const rootUrlPromise = this.manifestService.getRootUrl().pipe(\n      switchMap(rootUrl =>\n        this.systemInfoService.getSystemVersion().pipe(\n          map((version: number) => {\n            return {\n              rootUrl,\n              version: version - 1 <= 25 ? version + 1 : version\n            };\n          })\n        )\n      )\n    );\n    return rootUrlPromise.pipe(\n      map(\n        (urlInfo: { rootUrl: string; version: number }) =>\n          `${urlInfo.rootUrl}api/${\n            includeVersionNumber && !preferPreviousVersion\n              ? urlInfo.version + '/'\n              : preferPreviousVersion\n              ? urlInfo.version\n                ? urlInfo.version - 1 + '/'\n                : ''\n              : ''\n          }`\n      )\n    );\n  }\n\n  private _updateIndexDb(\n    httpConfig: HttpConfig,\n    requestData: any,\n    action: string = 'CREATE'\n  ) {\n    const indexDbSchema: IndexDbSchema = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.schema\n      : null;\n\n    const arrayKey = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.arrayKey\n      : null;\n\n    const indexDbKey = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.key\n      : null;\n\n    const data = arrayKey ? requestData[arrayKey] : requestData;\n\n    switch (action) {\n      case 'CREATE':\n      case 'UPDATE':\n        return (action === 'CREATE'\n          ? this.indexDbService.post(indexDbSchema, data)\n          : this.indexDbService.put(indexDbSchema, data)\n        ).pipe(\n          map(() => requestData),\n          catchError(e => {\n            console.warn('Could not save data into index DB, ERROR: ' + e);\n            return of(requestData);\n          })\n        );\n      case 'DELETE':\n        return this.indexDbService.delete(indexDbSchema, indexDbKey).pipe(\n          map(() => requestData),\n          catchError(e => {\n            console.warn('Could not delete data from index DB, ERROR: ' + e);\n            return of(requestData);\n          })\n        );\n      default:\n        console.log('No action has been specified');\n        return of(requestData);\n    }\n  }\n\n  private _fetchFromIndexDb(httpConfig: HttpConfig) {\n    const indexDbSchema: IndexDbSchema = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.schema\n      : null;\n\n    const indexDbKey = httpConfig.indexDbConfig\n      ? httpConfig.indexDbConfig.key\n      : null;\n\n    return indexDbKey\n      ? this.indexDbService.findOne(indexDbSchema, indexDbKey)\n      : this.indexDbService.findAll(indexDbSchema).pipe(\n          map(response => {\n            const arrayKey = httpConfig.indexDbConfig\n              ? httpConfig.indexDbConfig.arrayKey\n              : null;\n            return response.length > 0\n              ? arrayKey\n                ? { [arrayKey]: response }\n                : response\n              : null;\n          })\n        );\n  }\n}\n"],"names":["switchMap","_.isArray","_.each","mergeMap"],"mappings":"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"}
